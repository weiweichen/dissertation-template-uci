%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: moclang.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Administrator
%%CreationDate: 7/3/2009, 4:53:48
%%BoundingBox: -314 313 168 481
%%HiResBoundingBox: -313.0620 313.0621 167.6560 480.7181
%%CropBox: -313.0620 313.0621 167.6560 480.7181
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4354 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2009-07-03T04:43:51-07:00"
   xap:CreateDate="2009-07-03T04:43:41-07:00"
   xap:MetadataDate="2009-07-03T04:43:51-07:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xapMM:DocumentID="uuid:d51a55b8-085f-48e0-be2c-237186c899cf"
   xapMM:InstanceID="uuid:f01e27b0-bf8a-4aed-9ece-75caef8e1449">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-memocode09.vsd</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Administrator</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -480.718 translate
pgsv
[0 1 -1 0 167.656 0 ]ct
gsave
np
gsave
0 0 mo
0 480.718 li
167.656 480.718 li
167.656 0 li
cp
clp
[1 0 0 1 -213.882 0 ]ct
gsave
261.66 300.39 mo
235.5 300.39 214.32 259.59 214.32 209.31 cv
214.32 159.03 235.5 118.231 261.66 118.231 cv
287.88 118.231 309.06 159.03 309.06 209.31 cv
309.06 259.59 287.88 300.39 261.66 300.39 cv
eclp
213.78 300.93 mo
310.74 300.93 li
310.74 115.65 li
213.78 115.65 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -96.96 185.28 0 -133.274 480.82 ]ct
<<
/T 1
/W 405 
/H 773 
/M[405 0 0 -773 0 773 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
S,WKRl)O$K"2Fm9p!QhB?iU/kd]*>_rrN/mdT$BVs8VB4WWU$9s7PYWku@gms8VB4WWU$9s7Of?!+,g-
s6A%4"2Fm9p!QhB?iU/kl`00K"2Fm9p!QhB?iU/kd]*Das8Vc?<An4as8&b,Wk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\T6p$>]A<<HV.s6@t2!Pe<V<W5u!?g?"<!Pe<S<<6Il
mAf6I!Pe<S<<6Ile>iJI!Pe<S<<6Ild&I,]p$Pi?<<6Ild&I,]p!m(?<<6Ild&I,]p!?\P?i$e6Wk,4A
Wk,4AWk,4AWk,4A+KE#Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-CWr&ds^\,rR!FP-=
WWBm-n5\FI!FP-=WWBm-f2_ZI!FP-=WWBm-crC*RlLCn4WWBm-crC*RlI`-4WWBm-crC*RlHlO3^\..t
hc2L?qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<fi@fI!FP-=
WWBm-crC*RlLV%4WWBm-crC*RlIr94WWBm-crC*RlHlO3^\.5!h,OJ_lHlO3^\->]p/M-#lHlO3^\,rR
!FP-bWnaTT^\,rR-=?VL\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A%D&RNWk,4AWk,4A
Wk\5R<<6Ild&I,]p%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>
?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?ShPY\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A^\,rR!FP-VWp$G`^\,rR!FP-=WWBm-crC*RlHlO3^\-klk>_OilHlO3^\,uS!``Um
d&I,]p!?\>?g?sWk,JHsp!?\>?g?(>"0/B9p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4Fp$>]?<<6Ild&I,]p!Zq?<<6Ild&I,]p!?\>?g@$YjJi6qp!?\>?g?.@
rMfn5p!?\>?g?"<!Pe<q<T@'[?g?"<!Pe<X<W#ht?g?"<!Pe<S<>/a9Wk,4AWk,4AWk,4AWk,4AWk'=Q
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<crC*RlIN!4WWBm-crC*RlHlO3^\.(riDfnclHlO3
^\-2YqGdQ'lHlO3^\,rR!FP-^Wo0lX^\,rR!FP-EWqiXq^\,rR!FP-=WWBm-nl=RI1gg*Z\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-8[pf.?%lHlO3^\,rR!FP-`Wns`V
^\,rR!FP-GWqWLo^\,rR!FP-=WWBm-oMs^I!FP-=WWBm-gK!rI!FP-=WWBm-crC*RlLh14WWBm-crDE"
qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uH4NWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe=$
<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Il
d&I,]p"rd?<<-A^qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<
crC*RlKP>4WWBm-crC*RlHlO3^\,rR!FP-=WWBm-l;d"I!FP-=WWBm-d8^6J?g?"<!Pe<S<<6Ill`0*I
!Pe<S<<6Ild]*DLWk\5R<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk\5n<TR3]?g?"<!Pe<V<W5u!?g?"<!Pe<S<<6IlmAf6I!Pe<S<<6Ile>iJI!Pe<S<<6Ild&I,]
p$Pi?<<6Ild&I,]p!m(?<<6Ild&I,]p!?\P?i$e6Wk,4AWk,4AWk,4AWk,4A+KE#Q\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A^\,rR!FP-CWr&ds^\,rR!FP-=WWBm-n5\FI!FP-=WWBm-f2_ZI!FP-=WWBm-
crC*RlLCn4WWBm-crC*RlI`-4WWBm-crC*RlHlO3^\..thc2L?qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<fi@fI!FP-=WWBm-crC*RlLV%4WWBm-crC*RlIr94WWBm-
crC*RlHlO3^\.5!h,OJ_lHlO3^\->]p/M-#lHlO3^\,rR!FP-bWnaTT^\,rR-=?VL\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A%D&RNWk,4AWk,4AWk\5R<<6Ild&I,]p%DD?<<6Ild&I,]p"`X?
<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?ShPY
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-VWp$G`^\,rR
!FP-=WWBm-crC*RlHlO3^\-klk>_OilHlO3^\,uS!``Umd&I,]p!?\>?g?sWk,JHsp!?\>?g?(>"0/B9
p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp$>]?<<6Il
d&I,]p!Zq?<<6Ild&I,]p!?\>?g@$YjJi6qp!?\>?g?.@rMfn5p!?\>?g?"<!Pe<q<T@'[?g?"<!Pe<X
<W#ht?g?"<!Pe<S<>/a9Wk,4AWk,4AWk,4AWk,4AWk'=Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uNO<crC*RlIN!4WWBm-crC*RlHlO3^\.(riDfnclHlO3^\-2YqGdQ'lHlO3^\,rR!FP-^Wo0lX^\,rR
!FP-EWqiXq^\,rR!FP-=WWBm-nl=RI1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A^\-8[pf.?%lHlO3^\,rR!FP-`Wns`V^\,rR!FP-GWqWLo^\,rR!FP-=WWBm-oMs^I
!FP-=WWBm-gK!rI!FP-=WWBm-crC*RlLh14WWBm-crDE"qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uH4NWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe=$<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S<<6Il
pSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Ild&I,]p"rd?<<-A^qPq-,\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<crC*RlKP>4WWBm-crC*RlHlO3^\,rR!FP-=
WWBm-l;d"I!FP-=WWBm-d8^6J?g?"<!Pe<S<<6Ill`0*I!Pe<S<<6Ild]*DLWk\5R<A\(ZWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5n<TR3]?g?"<!Pe<V<W5u!?g?"<
!Pe<S<<6IlmAf6I!Pe<S<<6Ile>iJI!Pe<S<<6Ild&I,]p$Pi?<<6Ild&I,]p!m(?<<6Ild&I,]p!?\P
?i$e6Wk,4AWk,4AWk,4AWk,4A+KE#Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-CWr&ds
^\,rR!FP-=WWBm-n5\FI!FP-=WWBm-f2_ZI!FP-=WWBm-crC*RlLCn4WWBm-crC*RlI`-4WWBm-crC*R
lHlO3^\..thc2L?qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<
fi@fI!FP-=WWBm-crC*RlLV%4WWBm-crC*RlIr94WWBm-crC*RlHlO3^\.5!h,OJ_lHlO3^\->]p/M-#
lHlO3^\,rR!FP-bWnaTT^\,rR-=?VL\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A%D&RN
Wk,4AWk,4AWk\5R<<6Ild&I,]p%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJ
o;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?ShPY\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-VWp$G`^\,rR!FP-=WWBm-crC*RlHlO3^\-klk>_OilHlO3
^\,uS!``Umd&I,]p!?\>?g?sWk,JHsp!?\>?g?(>"0/B9p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp$>]?<<6Ild&I,]p!Zq?<<6Ild&I,]p!?\>?g@$YjJi6q
p!?\>?g?.@rMfn5p!?\>?g?"<!Pe<q<T@'[?g?"<!Pe<X<W#ht?g?"<!Pe<S<>/a9Wk,4AWk,4AWk,4A
Wk,4AWk'=Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<crC*RlIN!4WWBm-crC*RlHlO3^\.(r
iDfnclHlO3^\-2YqGdQ'lHlO3^\,rR!FP-^Wo0lX^\,rR!FP-EWqiXq^\,rR!FP-=WWBm-nl=RI1gg*Z
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-8[pf.?%lHlO3^\,rR
!FP-`Wns`V^\,rR!FP-GWqWLo^\,rR!FP-=WWBm-oMs^I!FP-=WWBm-gK!rI!FP-=WWBm-crC*RlLh14
WWBm-crDE"qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uH4NWk,4AWk,4AWk,4Fp!?\>
?g?"<!Pe=$<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]
p%VP?<<6Ild&I,]p"rd?<<-A^qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uNO<crC*RlKP>4WWBm-crC*RlHlO3^\,rR!FP-=WWBm-l;d"I!FP-=WWBm-d8^6J?g?"<!Pe<S
<<6Ill`0*I!Pe<S<<6Ild]*DLWk\5R<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk\5n<TR3]?g?"<!Pe<V<W5u!?g?"<!Pe<S<<6IlmAf6I!Pe<S<<6Ile>iJI!Pe<S
<<6Ild&I,]p$Pi?<<6Ild&I,]p!m(?<<6Ild&I,]p!?\P?i$e6Wk,4AWk,4AWk,4AWk,4A+KE#Q\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-CWr&ds^\,rR!FP-=WWBm-n5\FI!FP-=WWBm-f2_ZI
!FP-=WWBm-crC*RlLCn4WWBm-crC*RlI`-4WWBm-crC*RlHlO3^\..thc2L?qPq-,\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<fi@fI!FP-=WWBm-crC*RlLV%4WWBm-crC*R
lIr94WWBm-crC*RlHlO3^\.5!h,OJ_lHlO3^\->]p/M-#lHlO3^\,rR!FP-bWnaTT^\,rR-=?VL\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A%D&RNWk,4AWk,4AWk\5R<<6Ild&I,]p%DD?<<6Il
d&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b
<Us,i?ShPY\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-V
Wp$G`^\,rR!FP-=WWBm-crC*RlHlO3^\-klk>_OilHlO3^\,uS!``Umd&I,]p!?\>?g?sWk,JHsp!?\>
?g?(>"0/B9p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4F
p$>]?<<6Ild&I,]p!Zq?<<6Ild&I,]p!?\>?g@$YjJi6qp!?\>?g?.@rMfn5p!?\>?g?"<!Pe<q<T@'[
?g?"<!Pe<X<W#ht?g?"<!Pe<S<>/a9Wk,4AWk,4AWk,4AWk,4AWk'=Q\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uNO<crC*RlIN!4WWBm-crC*RlHlO3^\.(riDfnclHlO3^\-2YqGdQ'lHlO3^\,rR!FP-^
Wo0lX^\,rR!FP-EWqiXq^\,rR!FP-=WWBm-nl=RI1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A^\-8[pf.?%lHlO3^\,rR!FP-`Wns`V^\,rR!FP-GWqWLo^\,rR!FP-=
WWBm-oMs^I!FP-=WWBm-gK!rI!FP-=WWBm-crC*RlLh14WWBm-crDE"qPq-,\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uH4NWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe=$<SLLS?g?"<!Pe<`<V08l?g?"<
!Pe<S<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Ild&I,]p"rd?<<-A^qPq-,\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<crC*RlKP>4WWBm-crC*RlHlO3
^\,rR!FP-=WWBm-l;d"I!FP-=WWBm-d8^6J?g?"<!Pe<S<<6Ill`0*I!Pe<S<<6Ild]*DLWk\5R<A\(Z
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5n<TR3]?g?"<!Pe<V
<W5u!?g?"<!Pe<S<<6IlmAf6I!Pe<S<<6Ile>iJI!Pe<S<<6Ild&I,]p$Pi?<<6Ild&I,]p!m(?<<6Il
d&I,]p!?\P?i$e6Wk,4AWk,4AWk,4AWk,4A+KE#Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR
!FP-CWr&ds^\,rR!FP-=WWBm-n5\FI!FP-=WWBm-f2_ZI!FP-=WWBm-crC*RlLCn4WWBm-crC*RlI`-4
WWBm-crC*RlHlO3^\..thc2L?qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uNO<fi@fI!FP-=WWBm-crC*RlLV%4WWBm-crC*RlIr94WWBm-crC*RlHlO3^\.5!h,OJ_lHlO3
^\->]p/M-#lHlO3^\,rR!FP-bWnaTT^\,rR-=?VL\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A%D&RNWk,4AWk,4AWk\5R<<6Ild&I,]p%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1g
p!?\>?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?ShPY\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\,rR!FP-VWp$G`^\,rR!FP-=WWBm-crC*RlHlO3^\-kl
k>_OilHlO3^\,uS!``Umd&I,]p!?\>?g?sWk,JHsp!?\>?g?(>"0/B9p!?\q?i$e6Wk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp$>]?<<6Ild&I,]p!Zq?<<6Ild&I,]p!?\>
?g@$YjJi6qp!?\>?g?.@rMfn5p!?\>?g?"<!Pe<q<T@'[?g?"<!Pe<X<W#ht?g?"<!Pe<S<>/a9Wk,4A
Wk,4AWk,4AWk,4AWk'=Q\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<crC*RlIN!4WWBm-crC*R
lHlO3^\.(riDfnclHlO3^\-2YqGdQ'lHlO3^\,rR!FP-^Wo0lX^\,rR!FP-EWqiXq^\,rR!FP-=WWBm-
nl=RI1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-8[pf.<$
N;q`6J,~>

%%EndBinary
grestore
np
f
306.42 119.97 mo
306.42 116.13 li
310.26 116.13 li
310.26 119.97 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[3.84 0 0 -3.84 47.686 388.18 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
.876 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
261.66 300.39 mo
235.5 300.39 214.32 259.59 214.32 209.31 cv
214.32 159.03 235.5 118.23 261.66 118.23 cv
287.88 118.23 309.06 159.03 309.06 209.31 cv
309.06 259.59 287.88 300.39 261.66 300.39 cv
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
343.68 353.13 mo
381 353.13 li
381 249.27 li
343.68 249.27 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
f
343.68 353.13 mo
381 353.13 li
381 249.27 li
343.68 249.27 li
cp
@
381 353.13 mo
cp
@
337.5 359.37 mo
374.82 359.37 li
374.82 255.45 li
337.5 255.45 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
f
337.5 359.37 mo
374.82 359.37 li
374.82 255.45 li
337.5 255.45 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
374.82 359.37 mo
cp
@
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT Initial
ct_T42Dict begin
-0.625 -0.375 2 1.008
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f320e0b3397000000cc000000566376
7420ef1f94cc000001240000073a6670676d08e8ba2800000860000005d7
676c7966c7a23d32000070c80003a50e68656164cee221a800000e380000
003668686561127e12ff00000e7000000024686d7478a006329b00000e94
00001a286c6f63610cceaeba000028bc00001a2c6d6178700d8312030000
42e8000000206e616d65cc67f6d30000430800001d4f7072657041216403
000060580000106f67646972000000000000000000000000000103d402bc
00050000059a05330000011b059a0533000003d1006602120805020b0704
02020202020400007a878000000000000008000000004d6f6e6f00200020
fffc05d3fe510133073e01b2400001ffffff0000000005ba001c05ba001c
05a7001c0426001c0000ffe40000ffe40000ffe4fe69ffe405ba001cfe69
ffe402ea0000011d0000011d000000000000000000b200ac00d701280120
00b301fa001700f8011901310049000400f7000300af00fd009500140054
00960112002400160055004901040119012b008c019bff76ffe9003d0092
00a2ffb70182ffaa0016008f00c600f8001c00de04010037004e00550055
006500e903e50059ff9a00080087000b003b00520116006100d600d600f5
00000093009400be017cfff80004001400820092003c00410041ffc1fffc
002a008c049005d809b5009100bb0106ff63ff69001e0022008a022bffd6
ffdf0026005900a300ac0104012b01c004480021006b00850098011903c6
006b009500a400fe010c025d034305bf000000490056006e0077008a00aa
00ca0112015005d805f0ff7bffe70006001300280061006900e90135014d
02a5040cff3effda005b00b900c801190119011901c0045b04a7055bfe3f
ff9dffc2001500b7010a01bc01c10532058efd81ffa1ffae000c00260031
003d004e00560062008300c100c900f100f2027fff7f00480053007700c5
011d01200126012801d60219027e027e03d3002e0041005d006b0075009f
00b000b200ba00bb00bd00d600db00e000e50114011b014a0162019101f2
020c026402cf039b03b403d4040104a9001600230025002a007400a500b6
00cc00cd00cf0105012001300150016a016f0197019d01e002b002ec02f7
0408048304fb04fd0526fee0fefbff4efff50018001a004c007a007f0091
00a300b300b400ce00d500f200f300f601100138016801a101b001e001ec
02090222024f0270029602a502ad034e039103c104350442046b04cd04da
0586058b076107fefca6fe93feadfed1ffb7ffd10003000e001800260046
00690081008f00a500bf00d300d500d900dd00e20119012b0138013b015a
015e016801730188019401ad01c501d101ea01f20200020002000222023b
0244024f026f0272027e02820293029402a502cf02cf02d002da02dd02eb
02f5030503220336037103a103b003b803d003e604100426042e0431044f
045a04ff053205320547055305a805ab05c205f0063c0664067006e80782
078408ccfd2afddefe00fe68feb0feb3ffaa00080059007a0091009e00a2
00af00b400bb00ca00cc00ce00d900e000f40114011a01210127012b0139
0146014b014d0157015c01650182018701920198019b01a201ae01c501c5
01d102070222022b024102530261026502840287028d02b402b402ba02c9
02d602d802ed02f503170323032b03310349035a035b036e03710374037e
03840391039103aa03cf03d303e703e803ed04080417041e0475047a0499
04a704b404d1054c056d056d05a205bf05c005d105fc05fc0602061a061c
062f066a06a806e2070607360750078907d407f30870011c012a011a0120
0000000000000000000000000219000b001e02aa0214047f01ed0000001d
0104000f0091002b01880153011201f3003f03fe0168010e047f01ed036e
03150219041300000000064004b00000027401bb003501c5007f06020301
000004e000b201dc02e004c3023d00d50160011904a7036e05ca022100ab
0426009002bc02bb014200b4023c0256029c030001e501a800e5006b0078
0094016b017300ab01ed013a017d0137017f00d4021603530184003cffa2
02040109014901f0006e031500810464005e000000000000000000000000
000000000000000000000000000000000000013900dc00e9fe9e040d047c
012b00b80096005900ac00df01a900fa0105ffec00170003005500610004
008c00a3008500280120005d00d6007f012601190104016c06cf00b40106
00000737063e047a00f000f900e905ba042604420000ffe7fe69049e04e3
ff37ff2d01200105012000a800740068004700f200e500d900bd00a80068
0047005c0048000a0028003200410050005a0064007d00870091ffb0ff9c
ff83ff79ff6f00cb012000fa012c01fa01a000d500b8005c003c00c800c8
008f00d9018b00b300470000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000fe6400c000ea01180125013203b003ed0576059005aa05b405be
05cd063100780084009b00cc00e200f4010a0120016300d100ea00f70108
01420019002c00340041003800480058006c025903bd0043011a007000d3
0028003700420050005a0064007300780082008c009c00a500bd00ce00f0
0110015c00be00d801020117012c016300ea01080041004b0055005f0073
00a60109018301b300410064001e002a00eb00fa010e01380274002c0040
0082009600b600c000cc00dc00e600f000ff010a0120012c013b01440156
016300f70057006401100136005001b10000ffb60039004e004403cc00e5
002401100042012201a400f0006000e0000e001d003905e30102002cfe4e
ff38026903bd011600ff000e00a00054001b003d01710041000f005000fd
0015014f0035fe52002c00d30000404154403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0c05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c
20b0032545b019234445b01a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321
b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4bb06451
584569b00943608a103a1b212121592d2c01b005251023208af500b00160
23edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500
edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b
2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8023623
701020b802364520b0005058b00161593a2f182d2c21210c6423648bb840
00622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c
21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c642364
8bb84000626023212d2cb4000100000015b00826b00826b00826b008260f
10161345683ab001162d2cb4000100000015b00826b00826b00826b00826
0f1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d
2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b
54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c6423
646164b0035158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46232046
8a608a61b8ff8062232010238ab902a702a78a70456020b0005058b00161
b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1400188
535a58b910000020885458b202010243604259b12401885158b920000040
885458b202020243604259b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
02436042595959592d00000100000002e6675c9a4cf75f0f3cf508190800
00000000a2e33c1d00000000b9d5b513fafafcfd10000815000100090001
00010000000000010000073efe4e00431000fafafe261000000100000000
00000000000000000000068a0600010000000000023900000239000002aa
00b803cb00700473001204730046071d005905c7005a01e7005c02aa006b
02aa0043031d001c04ac00550239007502aa0073023900930239fffd0473
0056047300a2047300330473004d047300260473005b0473005704730057
047300530473004102aa00c902aa00aa04ac005f04ac005504ac005f04e3
006a07cd003d05c7000005c7009605c7006105c700940556009504e30097
0639006205c700960239008c0473002305c7009904e3009d06aa009105c7
009806390059055600950639005905c700960556004a04e3002c05c70093
0556ffff078d0007055600000556fffd04e3001602aa00920239fffd02aa
002604ac00730473ffed02aa002a0473004904e300870473005504e30054
0473004102aa001804e3005404e30092023900930239ffa2047300890239
0093071d007e04e3009104e3005204e3008b04e3005b031d008704730030
02aa001f04e3008d0473000b063900090473000c0473000e04000022031d
003c023d00b0031d002d04ac004305c7000005c7000005c7006105560095
05c700980639005905c70093047300490473004904730049047300490473
004904730049047300570473004104730041047300410473004102390092
0239ffe90239ffcd0239ffd004e3009104e3005204e3005204e3005204e3
005204e3005204e3008d04e3008d04e3008d04e3008d0473004403330056
047300540473000d0473003b02cd00420473fffe04e3008b05e5fff705e5
fff7080000d802aa00bb02aa0005046400310800ffaa0639003f05b40098
046400320464003c0464003c04730001049c006f03f4002c05b4007a0696
00a1046400000231000002f6002502ec001a06250037071d005804e30057
04e3006502aa00c304ac0055046400540473ffec0464001f04e5001a0473
00600473006a080000c905c7000005c700000639005908000048078d0058
0473fffc08000000040000840400006902390098023900720464003103f4
002f0473000e0556fff70156fea90473ffe002aa004b02aa004b04e3001f
04e3001f047300440239009302390075040000710800000105c700000556
009505c7000005560095055600950239006a0239ffae0239ffbf0239ffc1
06390059063900590639005905c7009305c7009305c700930239009302aa
000302aafff302aa001302aa001a02aa00cd02aa009102aa002602aa0060
02aa00a002aa000304e3000a0239000a0556004a0473003004e300160400
0022023d00b005c7fffd04e300530556fff70473000e0556009504e3008b
04ac005504ac006d02aa005b02aa001902aa002806ac005c06ac005c06ac
0028047300000639006204e300540239008c0556004a0473003005c70061
0473005505c700610473005504e30054046bffed02aa01ea05c700000473
004905c700000473004905c7009405c0005105c7fffd0556009504730041
055600950473004104e3009d0239007904e3009d0315009504e3009a03d5
009005c7009804e3009105c7009804e300910639005904e3005205c70096
031d008705c70096031d00500556004a0473003004e3002c02aa001f04e3
002c03d5001e05c7009304e3008d05c7009304e3008d04e3001604000022
04e300160400002204cf009a063900560691005604eb004e04da004e03cc
004e0579004e0392003005b9004e046bffed04d500b8032b004f08c00029
0800004f040000990800004f040000990800004f040000980400009807d5
016a05c7008f04ab005504d5009d04ac005504d5022204d5010505abffe9
050001c905ab027e05abffe905ab027e05abffe905ab027e05abffe905ab
ffe905abffe905abffe905abffe905ab01c005ab027e05ab01c005ab01c0
05abffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905ab
ffe905abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905ab02d605ab0066
05abffea05d5ffff04d500920800000007eb013007eb012007eb013007eb
012004d500b204d5008004d5002a082b0198086b01b807550010060000f4
0600006f0440003a0540003704c0003f0415004004000025060000550647
008c0473009005abffc701eb008d03d500860715002303e9001804d50092
02d6005c02d6005c04d500b202d6004d05c700000473004905c700610473
005505c70061047300550556009504730041055600950473004105560095
047300410639006204e300540639006204e300540639006204e3005405c7
009604e3009205c7000504e300190239ffba0239ffbb0239ffda0239ffda
0239ffe10239ffe20239006e02390075047300230239ffa205c700990473
00890473008d04e3009d0239ffed05c7009804e3009105c9009c04e3008e
0639005904e300520639005904e3005205c70096031d002a0556004a0473
003004e3002c02aa000705c7009304e3008d05c7009304e3008d05c70093
04e3008d05c7009304e3008d078d0007063900090556fffd0473000e0239
008d05c70000047300490800ffaa071d00580639003f04e3005702aa00c9
078d000706390009078d000706390009078d0007063900090556fffd0473
000e0239009502aaffd70473000d04cd005a06ac005c06ac002906ac0030
06ac002f02aa00bc02aa002602aa00bb03b8fff405c7ffe806d3ffbb073f
ffbb03caffbb0699ffa6076bffc806b4ff9c0239ff2905c7000005c70096
05c000000556009504e3001605c700960239008c05c700990556000006aa
009105c70098052600660639005905c7009a0556009504cd005a04e3002c
0556fffd0556000006790056066a00620239ffcc0556ffff04eb004e039c
004e04e3008e0239008204a8006c04e200900473000f03af004e04e3008e
0453004e023900930476008e0473000f04e500900473000b0390004e04e3
005204f300760429004e04a80076049b00110607007606c2004e0239ffcd
04a8007604e3004e04a8007606c2004e055a00970715002f048900a405b1
00580556004a0239008c0235ffca0473002308c0001a0880009d07000037
04e2009a04fa000005c0009905c7000005c0009b05c70096048900a405b3
fffa05560095073b00170503002c05c0009905c0009904e2009a059d0020
06aa009105c700960639005905c000990556009505c7006104e3002c04fa
000006d400590556000005d8009a059f007d080a009a0827009a06f5001a
07d5009d05c0009b05b100570840009605c000040473004904f1005c04eb
0096035500880514fff90473004105acffff03fa001804eb008c04eb008c
040100880515001905eb009b04d5008804e3005204d5008804e3008b0473
005503eb00150473000e070000540473000c04eb008904a5007206ab008c
06c0008d05d5002806d5009504eb0099046b003806d5009104abfffb0473
004504e3000003550088046b005104730030023900930240ffd00239ffa2
07c000180740008c04e30000040100880473001204d5008803e500960393
00880800004108eb00a30620003002aa010102aa001e02aa003102aa0031
02aa010102aa007f02aa007e02aa008c02aa008c02aa010102aa001002aa
010102aa01210393007d02aa008c026500c802aa030202aaff0102aa00c9
04a90059049b004103a7000a0466003204ea0082022f0087034e005a04ed
00870503007d022f0087042c002803ed004b03f8004104e30087050a0037
022f00870316004b04e800500459000a04c0006404b2006403ff000a0418
000a04950082042c002805b8005a0563002d045e0087045e0087045e0087
0236005004090050068b0087022fffac042c0028042c002803f8ff1603f8
ff160479003205b8005a05b8005a05b8005a05b8005a04a9005904a90059
04a90059049b004103a2000a0466003204ea008202950000038100000503
007d02950000042c002803ed004b03f80041050a00370316004b04e80050
04c0006404b200640418000a04950082042c002805b8005a0563002d022f
0087049b004103ed004b04b2006404db00410000ffdc0000ff250000ffdc
0000fe51028d00ab028d00a002da004303c0007e0196ffba019c004601e5
0046019c0046019c004601ad0048019c004601b1004601510046047e0188
047e0150047e0104047e009e047e012d047e00ea047e00d5047e009c047e
00bc047e00ee04350085028d00c1043500b3060001000600010002be0058
06000100047e00a5047e00bd047e00de0600010006000100060001000600
01000600010001b100460600010006000100060001000600010006000100
06000100060001000600010004e6ffba0600010006000100060001000532
003905320039022cffba022cffba06000100060001000600010006000100
049e0034047800300430ffba0430ffba0376000a0376000a060e00290708
002902e2ffba0456ffba060e00290708002902e2ffba0456ffba05280097
046f000a0600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010001cf003001b1004601b1004601b1004001b100460600
0100060001000000ffdc0000fe510000ff160000ff160000ff160000ff16
0000ff160000ff160000ff160000ff160000ff160000ffdc0000ff160000
ffdc0000ff200000ffdc0473002d08000000060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100028d007f028d00670600010005a0002e03c0007e
01e800000207ffc301bc005e01e0fffa039c0006039c000601bc005e01e0
001a05280097049e0011022cffba022cffba01bc008801e0001a05320039
05320039022cffba022cffba02be0036035200030532003905320039022c
ffba022cffba0532003c0532003c022cffba022cffba049e003404780030
0430ffba0430ffba049e0034047800300430ffba0430ffba049e00340478
00300430ffba0430ffba02be006902be006902be006902be00690376000a
0376000a0376000a0376000a073200400732004004deffba04deffba0732
00400732004004deffba04deffba0880004008800040062cffba062cffba
0880004008800040062cffba062cffba0430ffba0430ffba0430ffba0430
ffba0430ffba0430ffba0430ffba0430ffba0454003403c000460454ffba
02e2ffba0454003403c000460454ffba02e2ffba0610002f0610002f0270
ffba0298ffba04e6002704e600270270ffba0298ffba0454002904540029
02e2ffba02e2ffba039c0023039c002301e0ffba01e0ffba02e2002102e2
00210352ffba0352ffba0454003e0454003e022cffba022cffba02be0058
0352000303c0ffba039cffba039c0006039c000605280097046f000a0528
0097049e0011022cffba022cffba0454000004c4000003e400220454001a
03e400220454001a03e400220454001a0600010006000100019c0046019c
00460600010006000100060001000151004601b100460600010006000100
01ad004801e5004606000100060001000600010001b1004601b1004601b1
004601b1004601b1004001cf003006000100019c0046019c004606000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028d00ca028d00c7028d00c606000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010002be00690100ffba0800ffba1000
ffbb06d3005905b0005206a3009305cb008d0000fd880000fbc10000fc5f
0000fe310000fcad0000fd550000fe260000fdf10000fd180000fc690000
fd950000fbe00000fc700000fed40000fecd0000fea0041b007806ac005c
06ac00190000fe450000fd550000fda60000fc5f0000fe250000fd180000
fbe00000fafa0000fb360000fc700000fb870000fb9b0000fcce0000fc54
0000fbc30000fc940000fbf50000fdb00000fe590000fd7e0000fc820000
fd340000fe500000fe460000fcd10000fd3e0000fd020000fc3a0000fce9
0000fc260000fc070000fc2f0000fb9e0000fb760239009305c700000473
004905c700000473004905c700000473004905c700000473004905c70000
0473004905c700000473004905c700000473004905c700000473004905c7
00000473004905c700000473004905c700000473004905c7000004730049
055600950473004105560095047300410556009504730041055600950473
004105560095047300410556009504730041055600950473004105560095
047300410239006a0239005d0239008c023900930639005904e300520639
005904e300520639005904e300520639005904e300520639005904e30052
0639005904e300520639005904e3005206d3005905b0005206d3005905b0
005206d3005905b0005206d3005905b0005206d3005905b0005205c70093
04e3008d05c7009304e3008d06a3009305cb008d06a3009305cb008d06a3
009305cb008d06a3009305cb008d06a3009305cb008d0556fffd0473000e
0556fffd0473000e0556fffd0473000e05c70000047300490239ffca0239
ffca0639005904e3005205c7009304e3008d05c7009304e3008d05c70093
04e3008d05c7009304e3008d05c7009304e3008d0000fef90000fef90000
fef40000feef0489fffd03550007073b001705acffff04e2009a04010088
04e2009a0401008805c7009604d500880473000104730012047300010473
0012055600000473000c059f007d04a50072059f009c04e3009205cf0059
0473004c0639005604e3005205320039022cffba0270ffba0298ffba04e6
0027022c0065022c0016022c0016022c0011022c0043022cffd20000fef0
01a8000f01a8fff502aa009002aa009001e8000001bc005e01bc005e0000
ffcb01bc000f01e0ffbf01bcfff501e0ffcd01bc001d01e0000901bc0088
01e0001a039c0006039c0006039c0006039c000605280097046f000a0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
0532003905320039022cffba022cffba0532003905320039022cffba022c
ffba0532003905320039022cffba022cffba0532003905320039022cffba
022cffba0532003905320039022cffba022cffba049e0034047800300430
ffba0430ffba049e0034047800300430ffba0430ffba049e003404780030
0430ffba0430ffba049e0034047800300430ffba0430ffba049e00340478
00300430ffba0430ffba049e0034047800300430ffba0430ffba02be004f
02be004f02be006902be006902be006902be006902be004f02be004f02be
006602be006602be006902be006902be006902be006902be002f02be002f
02be002202be00220376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0376000a0376000a
0376000a0376000a0376000a073200400732004004deffba04deffba0732
00400732004004deffba04deffba073200400732004004deffba04deffba
0880004008800040062cffba062cffba0880004008800040062cffba062c
ffba0430ffba0430ffba0454003403c000460454ffba02e2ffba0610002f
0610002f0610002f0270ffba0298ffba0610002f0610002f0270ffba0298
ffba0610002f0610002f0270ffba0298ffba0610002f0610002f0270ffba
0298ffba0610002f0610002f0270ffba0298ffba04e6002704e6002704e6
002704e60027060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba045400290454002902e2ffba02e2ffba045400290454
002902e2ffba02e2ffba045400290454002902e2ffba02e2ffba060e0029
0708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba060e
00290708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba
060e00290708002902e2ffba0456ffba039c0023039c002301e0ffba01e0
ffba039c0023039c002301e0ffb101e0ffb1039c0023039c002301e0ffba
01e0ffba039c0023039c002301e0ffba01e0ffba0454003e0454003e022c
ffba022cffba0454003e0454003e0454003e0454003e0454003e0454003e
022cffba022cffba0454003e0454003e049e0034047800300430ffba0430
ffba02be005803520003031a001a031a001a031a001a039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c0006039c0006039c0006039c0006039c0006039c000605280042
046fffd905280097046f000a022cffba022cffba039c0006039c00060528
0097046f000a022cffba022cffba05280097046f000a067f0044067f0045
067f0044067f004501a800280000fe290000fe8c0000ff250000ff230000
fefa0000ff7a0000fe5908fc003208ad00320000ffb50000ffb60000fef0
0000ff590000fe590000ff8c01b4000002f700000000fe850000ff0704cd
00320000ff580000ff580000ff59073200400732004004deffba04deffba
0880004008800040062cffba062cffba0454003403c000460454ffba02e2
ffba03c0007e02e2002102be0058022cffba0290ffba01f4002f01f4003b
01f4001201f400b101f4006d060e002907080029022f00870000fec80350
0000045e008703e4fff50454fff503e400220454001a03e400220454001a
03e400220454001a03e400220454001a03e400220454001a03e400220454
001a047e0072047e00bd03e4000f0454000f000000000000006c0000006c
0000006c0000006c0000011a000001ba0000038800000630000007960000
0948000009a800000a3200000abc00000bf000000c6c00000cdc00000d2a
00000d6800000dbe00000ec200000f44000010ea000012420000135c0000
14ce00001602000016be0000185c000019a2000019fc00001a8800001b12
00001b9400001c2200001d1000001ea40000201e00002186000022c00000
23aa00002468000025040000264a0000271e000027a60000284400002a0e
00002a6a00002cbe00002ebc00002fc4000030940000322e000033920000
35f20000368800003768000038a200003ae400003c6000003d5600003ee8
00003f5c00003fb000004018000040ca000040fe00004162000043700000
446c000045a800004698000048a4000049a400004b8000004c8000004d22
00004dfa00004f2600004f920000514600005230000053200000541c0000
551e000056020000594800005a6800005b5000005ca400005f0a000060e0
0000625e000063ec000065140000657a000066b20000677a000067bc0000
67fc000068380000687e000068c6000069160000695a00006994000069c4
000069f400006a3600006a7800006aaa00006aee00006b3a00006b840000
6bb400006bfa00006c3600006c7600006cb200006cea00006d3a00006d76
00006db200006de200006e2400006e7400006ebe00006ef600006f380000
6f6c00006fe40000706a000072160000738200007578000075c20000765c
000077aa0000799a00007b4e00007c6800007cca00007d2200007e020000
7f34000080ac000081d40000829a0000837000008430000085d400008690
0000877200008850000088b60000894a00008a0e00008b4a00008be20000
8d2200008fc40000914a00009250000092f00000934a0000942a000095d8
00009744000097ee000098e2000099c800009a3c00009a7400009aba0000
9af800009c7400009e8a00009ec400009efa00009fc20000a0960000a106
0000a1240000a1c60000a2a00000a2dc0000a3160000a37c0000a5140000
a5b20000a6440000a7a00000a8ca0000a9b40000a9f20000aa020000aa20
0000ac2a0000ac6c0000acba0000acf60000ad360000ad840000adc20000
ae000000ae3a0000ae7c0000aeb40000aee40000af1e0000af620000af92
0000afda0000b03c0000b0a80000b1560000b18a0000b1fa0000b2400000
b2f60000b3900000b4240000b49a0000b4f60000b5ca0000b6960000b6c6
0000b6f60000b75a0000b7b00000b8380000b9620000bada0000bb100000
bb400000bc480000bd1c0000bd580000beee0000bf6c0000c07a0000c1ae
0000c35a0000c4e80000c7300000c7e60000c82a0000c86a0000c89c0000
c8e00000c91c0000c9600000c99a0000c9cc0000c9fe0000cb2e0000cb64
0000cb9c0000cbe80000cc2a0000cc6c0000ccac0000cce20000ce200000
ce380000ce640000ce9c0000ceda0000cf0a0000cf3a0000cf780000d036
0000d0e80000d11c0000d1520000d18e0000d1cc0000d21a0000d24c0000
d27e0000d2ba0000d2f60000d3320000d36e0000d3a00000d3d00000d400
0000d5120000d6a00000d6de0000d8520000d8960000d8ce0000d9060000
d93c0000d98c0000d9ce0000da140000da660000dab20000dbc40000dcd0
0000ddb80000dea80000dfae0000e0980000e1080000e2320000e2820000
e2b20000e3ac0000e5e00000e6200000e6600000e6a00000e6de0000e73c
0000e79a0000e8080000e8280000e8c80000e9620000e9980000e9fc0000
ea460000ea900000eaac0000eac80000eae80000eb080000eb280000eb48
0000eb6e0000eb940000ebba0000ebe00000ec100000ec380000ec600000
ec8c0000ecb80000ecec0000ed160000ed420000ed780000eda20000edce
0000ee040000ee2e0000ee580000ee8c0000eebc0000eef00000ef340000
ef640000ef980000efda0000f00e0000f0400000f0820000f0b60000f0e6
0000f1280000f16c0000f1b20000f20e0000f22a0000f2460000f2620000
f27e0000f29a0000f4080000f6b20000f9220000f93e0000f9580000f974
0000f9900000f9ac0000f9c80000fa240000fa5e0000fac80000fb920000
fc320000fd080000fd880000fe100000fe800000ff160000ff740000ffba
000100180001007a000100ba000101160001017a000101ec0001022a0001
03bc000104cc000104f6000105120001053e00010576000105c2000105f2
000106220001065600010686000106b6000106e600010716000107460001
0776000107a6000107d600010806000108360001086600010896000108c6
00010a5000010bfe00010c2e00010c5e00010d4a00010e6200010e920001
0ec000010ef000010f1e00010f4e00010f7c000110580001113a00011174
00011254000112a40001130a0001145000011482000114a8000114d00001
150e000115e4000116dc0001170c0001173c0001176c0001179c000117cc
000117fa0001182a0001185a0001191c00011a3000011a6000011a900001
1ac000011af000011b2000011b5000011c5600011d6400011d9400011dc4
00011df400011e2400011ec400011f1600011fe400012014000120440001
2074000120a4000120d600012106000121360001216600012196000121ca
000121fe0001222e0001225e000122bc000122e60001246c000125540001
27080001295c00012b9400012d3200012d9200012e1800012e2800012eea
0001308e0001316200013238000132c4000133e8000134fc0001366e0001
36a4000136b4000136c40001379e000137ae000137be000137ce000137de
000137ee000138f40001390400013914000139be000139ce00013a200001
3a3000013b2400013b3400013b4400013b5400013c2600013d4000013d74
00013da800013dd800013e0800013e3800013e6600013e9a00013f840001
407a0001415a00014224000142e400014336000144680001457c00014640
000146500001475c0001476c0001483600014914000149dc00014afa0001
4bc600014cc400014cf600014d2a00014d5a00014d8a00014dba00014dee
00014ed000014f0000015024000150340001504400015078000150880001
518e0001527a0001534800015378000153a80001542800015438000154ee
000154fe00015556000155f400015604000157e60001590a00015a300001
5a6000015b8a00015c0200015c1200015c2200015c3200015c8600015c96
00015ca600015cb600015dae00015eac00015ebc00015f2800015fb60001
603e000160dc0001619a000162820001633c000164660001658c000166ca
000166da00016800000168ee0001694c00016a1c00016a2c00016c120001
6d5600016e3a00016e6a00016f800001700a000171c40001724a0001725a
000172c4000172d4000172e40001734e0001735e000174b2000174c20001
754c000175d80001766800017718000177d4000178d40001799200017a98
00017ba400017cd200017d0600017e4200017e7000017f8600017f960001
7fa600017fd800017fe8000180f4000181d8000182d60001831000018340
000183e00001843e000184ae000184ea0001868000018704000187960001
88e6000189a600018a9600018aec00018b7a00018c4800018c8c00018ce4
00018d4600018e4600018ea000018ee400018f1c00018f6000018fae0001
8ffa000190400001909c000191f200019294000193aa00019408000194a4
000194e20001959c00019612000197100001974a000197d4000198900001
9932000199b800019a8400019ac200019b4a00019c1800019cf600019dbe
00019ecc00019f820001a08e0001a1400001a1c80001a2c80001a3b00001
a4080001a4600001a4b40001a5020001a59a0001a6a60001a6ea0001a728
0001a7700001a7a60001a8100001a8f00001a9280001a9560001a98e0001
a9bc0001a9ee0001aa200001aa9a0001aaf00001ac4e0001acee0001ae0c
0001aebc0001af080001b05e0001b10e0001b1380001b1b40001b1fc0001
b3340001b4320001b4a00001b6220001b7e00001b9460001ba540001ba7e
0001bc0e0001bd4c0001bd780001bdac0001bdd80001be080001bf760001
bfa00001c0b00001c1620001c2120001c2a60001c3740001c4b00001c4c0
0001c4f40001c5b80001c7740001c8520001c8c00001c9ea0001ca4c0001
cb620001cc340001ccc00001cd3e0001ce1a0001cf5a0001d0540001d10a
0001d1f60001d2be0001d39c0001d46c0001d54a0001d5de0001d80a0001
d8340001d85e0001d86e0001d8980001d9d20001daf00001dc000001dc2a
0001dc540001dc7e0001dca80001dcd20001deba0001dee40001df0e0001
df380001df620001df8c0001dfb60001dfe00001e00a0001e03e0001e068
0001e0920001e0bc0001e2560001e2660001e39e0001e3ae0001e3d80001
e4020001e42c0001e4560001e5f00001e86a0001e9c80001e9d80001eb4a
0001eb5a0001ecb80001ee9c0001ef9e0001f1240001f2ee0001f5420001
f6b00001f8a40001f8b40001f8c40001f8ee0001f9180001f9420001f96c
0001f9960001f9c00001f9ea0001fa140001fa3e0001fa680001fa920001
fabc0001fae60001fb100001fb3a0001fb640001fe200002000800020196
000203da0002055600020580000205aa000205da0002060a0002065a0002
06aa000206ea0002075c000207b00002080e000208640002089a000208dc
000209220002096c0002099c000209d400020a0400020b6a00020eb00002
0eda00020f0400020f2e00020f5800020f8200020fac00020fd600021000
0002102a000210540002107e000210a8000210d2000210fc000211260002
11500002117a000211a4000211ce000211f8000212220002124c00021276
000212a0000212ca000212f40002131e00021348000213e0000214700002
149a000218220002192c00021aa400021c2a00021e0c00021fe0000221fe
0002220e000223b60002254e000227c000022a0000022b7800022b880002
2c3400022cde00022e1a00022e2a00022ef600022f06000230a800023290
000233fc0002340c00023514000235240002369e000236ae000237dc0002
37ec0002392800023adc00023bd400023be400023cd600023e3400023ee0
00023ef000024032000241e0000242d6000242e60002438a0002439a0002
4482000244920002455c0002456c00024682000246920002485800024868
000249d6000249e600024c5800024c6800024e7800024e88000250040002
5014000251460002515600025314000253240002549a000254aa00025618
000256280002563800025648000258080002581800025828000258380002
598800025ac000025bd800025cd200025e74000260060002616e000262bc
0002648200026492000265e4000267460002692c0002693c00026ac40002
6c6800026ea200026eb200026ec200026ed20002703c0002704c0002711e
0002712e00027266000272760002735c0002736c000274a6000274b60002
757000027580000276a60002780a0002797800027b2600027c5600027c66
00027de000027f2200028142000283140002842400028434000286b60002
88e200028bac00028e08000290c80002930a000294c8000296220002964c
000296760002968600029696000296c0000296ea00029714000297240002
97340002975e0002978800029798000297a8000297d2000297fc00029826
000298360002984600029856000298660002987600029886000298b00002
98c0000298d0000298fa000299240002994e00029978000299a2000299cc
000299f600029a2000029a4a00029a7400029a9e00029ac800029af20002
9b1c00029b4600029b7000029b9a00029bc400029bee00029c1800029c42
00029c6c00029c9600029cc000029cea00029d1400029d3e00029d680002
9d9200029dbc00029de600029e1000029e3a00029e6400029e8e00029eb8
00029ee200029f0c00029f3600029f6000029f8a00029fb400029fde0002
a0080002a0320002a05c0002a0860002a0b00002a0da0002a1040002a12e
0002a1580002a1820002a1ac0002a2540002a2980002a30e0002a3380002
a3620002a38c0002a3b60002a3e00002a40a0002a4340002a45e0002a488
0002a4b20002a4dc0002a5060002a5300002a55a0002a5840002a5ae0002
a5d80002a6020002a62c0002a6560002a6800002a6aa0002a6d40002a786
0002a7ba0002a7ee0002a8220002a9a60002ab260002ac920002ade00002
aea00002af620002afd40002b0a60002b1780002b1ea0002b2ae0002b3a0
0002b4640002b5560002b5fc0002b7080002b79a0002b8e20002ba200002
ba840002bbac0002bd7a0002bfc20002c02e0002c09a0002c1040002c170
0002c21e0002c2cc0002c3720002c4180002c4be0002c4ee0002c51e0002
c54e0002c5600002c5720002c5840002c5960002c5a80002c6180002c68a
0002c6ba0002c6cc0002c6de0002c6ee0002c6fe0002c7100002c7220002
c7340002c7460002c7580002c76a0002c8760002c91c0002ca280002cace
0002cb260002cb4c0002cb720002cb9c0002cbca0002cc140002cc700002
ccaa0002cd020002cd420002cd920002cdca0002ce200002ce620002cea2
0002cef40002cf660002cfb00002d01c0002d05c0002d0c80002d1080002
d1700002d1b20002d2060002d22c0002d2520002d27c0002d2ac0002d2dc
0002d30c0002d35a0002d3b60002d3f40002d44e0002d4960002d4ec0002
d5300002d5840002d5ca0002d60c0002d6320002d6680002d68e0002d6b4
0002d6da0002d7000002d72e0002d7580002d7a20002d7fe0002d8380002
d8900002d8d00002d9240002d95c0002d9ac0002d9ee0002da2e0002da68
0002daa40002dae00002db1c0002db4a0002db740002dbb20002dbe20002
dc080002dc2e0002dc540002dc7a0002dca40002dcce0002dd0e0002dd5a
0002dda00002ddd80002de020002de2c0002de5c0002de8c0002deb20002
ded80002df020002df2c0002df5e0002df900002dfc00002dff00002e020
0002e0500002e0800002e0ae0002e0de0002e10e0002e13e0002e16e0002
e1a20002e2020002e2360002e29a0002e2ce0002e32e0002e3620002e3c6
0002e46e0002e53e0002e6540002e7260002e7a00002e80e0002e9f00002
ebba0002ecda0002edec0002ef300002f0440002f0d40002f1540002f1e8
0002f26a0002f32a0002f3ca0002f4960002f57c0002f6340002f7000002
f77c0002f78c0002f85a0002f91a0002f9e40002fa980002fb8e0002fc04
0002fd2c0002fe460002ffce0003005000030140000302360003032e0003
03c0000305d200030762000307e80003096a000309d600030a4000030aae
00030c7000030e3800030ec800030f1400030f5200030f9400030fdc0003
10080003104e00031084000310c0000310fe0003113c000311c40003124c
0003128e000312c6000313000003133a000313620003138a000313ce0003
1412000314500003148e000314be000314ee000315140003153a0003157c
000315be000316040003164a000316a2000316fa00031756000317b20003
180e0003186a000318b8000319060003192e000319560003197c000319a2
000319e600031a2a00031a7600031ac200031b0c00031b5600031ba40003
1bf200031c3200031cd200031cf800031d1e00031d6800031dd800031e00
00031e2800031e6e00031eb400031f0a00031f6000031fae000320680003
2090000320b80003210c00032160000321a0000321e0000322060003222c
00032292000322f80003233a0003237c000323a2000323c80003241e0003
2474000324d00003252c00032580000325d40003262200032670000326ba
000327040003275e000327b80003280c00032860000328a2000328e40003
298200032a2000032a6a00032ab400032b0600032b5800032bbe00032c24
00032c7c00032cd400032d0000032d2c00032d5800032d8400032db00003
2ddc00032e0800032e3400032e5a00032e8000032eac00032ed800032f26
00032f7400032fc00003300c0003305c000330ac00033126000331880003
32000003324a000333dc00033410000334440003347a0003349e00033508
00033572000335f40003365c000336a4000336ec00033738000337a20003
37ca000337f2000338180003383e0003388e000338de00033972000339c4
00033a2200033a8000033ae600033b4c00033c5e00033da800033e8c0003
3fe400034050000340b60003411400034176000341fc00034282000342e6
0003434a000343b60003442200034478000344ce00034500000345320003
45580003457e000345ea00034650000346ae00034710000348220003492e
00034a3c00034b4000034b6600034b8e00034bb200034bd600034bfe0003
4c2600034c4c00034c7200034d9400034ed000034ffe0003512a000351e4
0003529e0003535e0003541e00035502000355e6000356e2000357de0003
58c2000359a600035a7c00035b5200035b9c00035be600035c0c00035c32
00035c8200035cd200035cf600035d1a00035df000035e0000035e540003
5ea800035f0600035f6400035fa400035fe40003602e00036078000360c8
000361180003616e000361c40003621600036254000362ce000363100003
6354000363e20003647000036622000366320003666c000366a6000366d6
000367060003673a0003676e000367a8000367e2000368360003688a0003
68ec0003694e00036afe00036c8600036cc200036cfa00036d4400036d8e
00036dd400036e1a00036e6a00037090000370b6000370dc000371300003
73da000374ac0003754800037596000375d400037606000377f400037ab0
00037b8200037ce600037e2000037ecc00038062000382b6000384f20003
854c000385920003866000038752000387700003881a0003894000038a1c
00038a2e00038b8e00038d1400038d3a00038df800038e1600038e3c0003
8e6200038e8800038eae00038ed400038efa00038f2000038f4600038f92
00038ff20003901a000390400003919e0003937a0003938a0003945a0003
956a000395c8000396e00003986e0003991400039a5a00039aac00039afe
00039b3600039b8200039bae00039bf400039c2000039c5c00039cb60003
9d0000039d4c00039dbc00039e8200039efe00039fbe0003a0360003a110
0003a1a00003a1da0003a2160003a38e0003a47e0003a4c80003a50e0001
0000068a00f2003c006f000600020010002f00550000064e106f00030002
0000005f047a000000030000000000fe00000000000300000001000a013e
0000000300000002000805de0000000300000003005805c0000000030000
0004001405d20000000300000005001805e8000000030000000600180618
000000030000000700c40630000000030000000800260780000000030000
0009008a0da8000000030000000a04c200fe000000030000000b00620e32
000000030000000c00660e94000000030000000d06b406f4000000030000
000e005c0efa0001000000000000007f0f56000100000000000100050ff5
0001000000000002000412450001000000000003002c1236000100000000
0004000a123f0001000000000005000c124a0001000000000006000c1262
00010000000000070062126e000100000000000800131316000100000000
00090045162a000100000000000a02610fd5000100000000000b0031166f
000100000000000c003316a0000100000000000d035a12d0000100000000
000e002e16d30003000104030002000e170d0003000104030004001a1701
0003000104050002000a172700030001040500040016171b000300010406
00020006173d00030001040600040012173100030001040700020008174f
0003000104070004001417430003000104080002000c1763000300010408
000400181757000300010409000000fe00000003000104090001000a013e
0003000104090002000805de0003000104090003005805c0000300010409
0004001405d20003000104090005001805e8000300010409000600180618
000300010409000700c40630000300010409000800260780000300010409
0009008a0da8000300010409000a04c200fe000300010409000b00620e32
000300010409000c00660e94000300010409000d06b406f4000300010409
000e005c0efa00030001040a0002000e177b00030001040a0004001a176f
00030001040b00020012179500030001040b0004001e178900030001040c
0002000817b300030001040c0004001417a700030001040e0002001017d1
00030001040e0004001c17c50003000104100002001217b3000300010410
0004001e17a70003000104130002000617ed0003000104130004001217e1
0003000104140002000e17ff0003000104140004001a17f3000300010415
00020014181900030001041500040020180d0003000104160002000e1839
0003000104160004001a182d000300010419000200141853000300010419
00040020184700030001041b0002000a187300030001041b000400161867
00030001041d00020006174f00030001041d00040012174300030001041f
0002000a188900030001041f00040016187d0003000104240002000c189f
00030001042400040018189300030001042a0002000818b700030001042a
0004001418ab00030001042d0002000a18cb00030001042d0004001618bf
00030001080a0002000e177b00030001080a0004001a176f000300010816
0002000e18390003000108160004001a182d000300010c0a0002000e177b
000300010c0a0004001a176f000300010c0c0002000817b3000300010c0c
0004001417a700540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
00730020005200650073006500720076006500640043006f006e00740065
006d0070006f0072006100720079002000730061006e0073002000730065
007200690066002000640065007300690067006e002c0020004100720069
0061006c00200063006f006e007400610069006e00730020006d006f0072
0065002000680075006d0061006e00690073007400200063006800610072
006100630074006500720069007300740069006300730020007400680061
006e0020006d0061006e00790020006f0066002000690074007300200070
00720065006400650063006500730073006f0072007300200061006e0064
002000610073002000730075006300680020006900730020006d006f0072
006500200069006e002000740075006e0065002000770069007400680020
0074006800650020006d006f006f00640020006f00660020007400680065
0020006c006100730074002000640065006300610064006500730020006f
006600200074006800650020007400770065006e00740069006500740068
002000630065006e0074007500720079002e002000200054006800650020
006f0076006500720061006c006c002000740072006500610074006d0065
006e00740020006f00660020006300750072007600650073002000690073
00200073006f006600740065007200200061006e0064002000660075006c
006c006500720020007400680061006e00200069006e0020006d006f0073
007400200069006e0064007500730074007200690061006c002000730074
0079006c0065002000730061006e00730020007300650072006900660020
00660061006300650073002e00200020005400650072006d0069006e0061
006c0020007300740072006f006b00650073002000610072006500200063
007500740020006f006e002000740068006500200064006900610067006f
006e0061006c002000770068006900630068002000680065006c00700073
00200074006f002000670069007600650020007400680065002000660061
00630065002000610020006c0065007300730020006d0065006300680061
006e006900630061006c00200061007000700065006100720061006e0063
0065002e002000200041007200690061006c00200069007300200061006e
002000650078007400720065006d0065006c007900200076006500720073
006100740069006c0065002000660061006d0069006c00790020006f0066
002000740079007000650066006100630065007300200077006800690063
0068002000630061006e0020006200650020007500730065006400200077
00690074006800200065007100750061006c002000730075006300630065
0073007300200066006f0072002000740065007800740020007300650074
00740069006e006700200069006e0020007200650070006f007200740073
002c002000700072006500730065006e0074006100740069006f006e0073
002c0020006d006100670061007a0069006e006500730020006500740063
002c00200061006e006400200066006f007200200064006900730070006c
00610079002000750073006500200069006e0020006e0065007700730070
00610070006500720073002c002000610064007600650072007400690073
0069006e006700200061006e0064002000700072006f006d006f00740069
006f006e0073002e004d006f006e006f0074007900700065003a00410072
00690061006c00200042006f006c0064003a00560065007200730069006f
006e00200033002e0030003000200028004d006900630072006f0073006f
0066007400290041007200690061006c002d0042006f006c0064004d0054
0041007200690061006c00ae002000540072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e0020
0070006c0063002000720065006700690073007400650072006500640020
0069006e0020007400680065002000550053002000500061007400200026
00200054004d0020004f00660066002e00200061006e006400200065006c
0073006500770068006500720065002e004e004f00540049004600490043
004100540049004f004e0020004f00460020004c004900430045004e0053
0045002000410047005200450045004d0045004e0054000d000a000d000a
005400680069007300200074007900700065006600610063006500200069
00730020007400680065002000700072006f007000650072007400790020
006f00660020004d006f006e006f00740079007000650020005400790070
006f00670072006100700068007900200061006e00640020006900740073
002000750073006500200062007900200079006f00750020006900730020
0063006f0076006500720065006400200075006e00640065007200200074
006800650020007400650072006d00730020006f0066002000610020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e00200059006f0075002000680061007600650020006f00620074
00610069006e006500640020007400680069007300200074007900700065
006600610063006500200073006f00660074007700610072006500200065
006900740068006500720020006400690072006500630074006c00790020
00660072006f006d0020004d006f006e006f00740079007000650020006f
007200200074006f00670065007400680065007200200077006900740068
00200073006f006600740077006100720065002000640069007300740072
0069006200750074006500640020006200790020006f006e00650020006f
00660020004d006f006e006f0074007900700065002700730020006c0069
00630065006e0073006500650073002e000d000a000d000a005400680069
007300200073006f00660074007700610072006500200069007300200061
002000760061006c007500610062006c0065002000610073007300650074
0020006f00660020004d006f006e006f0074007900700065002e00200055
006e006c00650073007300200079006f0075002000680061007600650020
0065006e0074006500720065006400200069006e0074006f002000610020
007300700065006300690066006900630020006c006900630065006e0073
0065002000610067007200650065006d0065006e00740020006700720061
006e00740069006e006700200079006f0075002000610064006400690074
0069006f006e0061006c0020007200690067006800740073002c00200079
006f0075007200200075007300650020006f006600200074006800690073
00200073006f0066007400770061007200650020006900730020006c0069
006d006900740065006400200074006f00200079006f0075007200200077
006f0072006b00730074006100740069006f006e00200066006f00720020
0079006f007500720020006f0077006e0020007000750062006c00690073
00680069006e00670020007500730065002e00200059006f00750020006d
006100790020006e006f007400200063006f007000790020006f00720020
006400690073007400720069006200750074006500200074006800690073
00200073006f006600740077006100720065002e000d000a000d000a0049
006600200079006f00750020006800610076006500200061006e00790020
007100750065007300740069006f006e00200063006f006e006300650072
006e0069006e006700200079006f00750072002000720069006700680074
007300200079006f0075002000730068006f0075006c0064002000720065
007600690065007700200074006800650020006c006900630065006e0073
0065002000610067007200650065006d0065006e007400200079006f0075
002000720065006300650069007600650064002000770069007400680020
00740068006500200073006f0066007400770061007200650020006f0072
00200063006f006e00740061006300740020004d006f006e006f00740079
0070006500200066006f00720020006100200063006f007000790020006f
006600200074006800650020006c006900630065006e0073006500200061
0067007200650065006d0065006e0074002e000d000a000d000a004d006f
006e006f0074007900700065002000630061006e00200062006500200063
006f006e007400610063007400650064002000610074003a000d000a000d
000a0055005300410020002d002000280038003400370029002000370031
0038002d0030003400300030000900090055004b0020002d002000300031
003100340034002000300031003700330037002000370036003500390035
0039000d000a0068007400740070003a002f002f007700770077002e006d
006f006e006f0074007900700065002e0063006f006d004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d00200052006f0062
0069006e0020004e006900630068006f006c00610073002c002000500061
0074007200690063006900610020005300610075006e0064006500720073
002000310039003800320068007400740070003a002f002f007700770077
002e006d006f006e006f0074007900700065002e0063006f006d002f0068
0074006d006c002f006d0074006e0061006d0065002f006d0073005f0061
007200690061006c002e00680074006d006c0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d002f00680074006d006c002f006d0074006e0061006d0065002f
006d0073005f00770065006c0063006f006d0065002e00680074006d006c
0068007400740070003a002f002f007700770077002e006d006f006e006f
0074007900700065002e0063006f006d002f00680074006d006c002f0074
007900700065002f006c006900630065006e00730065002e00680074006d
006c547970656661636520a920546865204d6f6e6f7479706520436f7270
6f726174696f6e20706c632e204461746120a920546865204d6f6e6f7479
706520436f72706f726174696f6e20706c632f5479706520536f6c757469
6f6e7320496e632e20313939302d313939322e20416c6c20526967687473
205265736572766564436f6e74656d706f726172792073616e7320736572
69662064657369676e2c20417269616c20636f6e7461696e73206d6f7265
2068756d616e69737420636861726163746572697374696373207468616e
206d616e79206f6620697473207072656465636573736f727320616e6420
61732073756368206973206d6f726520696e2074756e6520776974682074
6865206d6f6f64206f6620746865206c6173742064656361646573206f66
20746865207477656e74696574682063656e747572792e2020546865206f
766572616c6c2074726561746d656e74206f662063757276657320697320
736f6674657220616e642066756c6c6572207468616e20696e206d6f7374
20696e647573747269616c207374796c652073616e732073657269662066
616365732e20205465726d696e616c207374726f6b657320617265206375
74206f6e2074686520646961676f6e616c2077686963682068656c707320
746f20676976652074686520666163652061206c657373206d656368616e
6963616c20617070656172616e63652e2020417269616c20697320616e20
65787472656d656c7920766572736174696c652066616d696c79206f6620
7479706566616365732077686963682063616e2062652075736564207769
746820657175616c207375636365737320666f7220746578742073657474
696e6720696e207265706f7274732c2070726573656e746174696f6e732c
206d6167617a696e6573206574632c20616e6420666f7220646973706c61
792075736520696e206e6577737061706572732c20616476657274697369
6e6720616e642070726f6d6f74696f6e732e4d6f6e6f747970653a417269
616c20426f6c643a56657273696f6e20332e303020284d6963726f736f66
7429417269616c2d426f6c644d54417269616ca82054726164656d61726b
206f6620546865204d6f6e6f7479706520436f72706f726174696f6e2070
6c63207265676973746572656420696e2074686520555320506174202620
544d204f66662e20616e6420656c736577686572652e4e4f544946494341
54494f4e204f46204c4943454e53452041475245454d454e540d0a0d0a54
686973207479706566616365206973207468652070726f7065727479206f
66204d6f6e6f74797065205479706f67726170687920616e642069747320
75736520627920796f7520697320636f766572656420756e646572207468
65207465726d73206f662061206c6963656e73652061677265656d656e74
2e20596f752068617665206f627461696e65642074686973207479706566
61636520736f66747761726520656974686572206469726563746c792066
726f6d204d6f6e6f74797065206f7220746f676574686572207769746820
736f667477617265206469737472696275746564206279206f6e65206f66
204d6f6e6f747970652773206c6963656e736565732e0d0a0d0a54686973
20736f66747761726520697320612076616c7561626c6520617373657420
6f66204d6f6e6f747970652e20556e6c65737320796f7520686176652065
6e746572656420696e746f2061207370656369666963206c6963656e7365
2061677265656d656e74206772616e74696e6720796f7520616464697469
6f6e616c207269676874732c20796f757220757365206f66207468697320
736f667477617265206973206c696d6974656420746f20796f757220776f
726b73746174696f6e20666f7220796f7572206f776e207075626c697368
696e67207573652e20596f75206d6179206e6f7420636f7079206f722064
697374726962757465207468697320736f6674776172652e0d0a0d0a4966
20796f75206861766520616e79207175657374696f6e20636f6e6365726e
696e6720796f75722072696768747320796f752073686f756c6420726576
69657720746865206c6963656e73652061677265656d656e7420796f7520
726563656976656420776974682074686520736f667477617265206f7220
636f6e74616374204d6f6e6f7479706520666f72206120636f7079206f66
20746865206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e
6f747970652063616e20626520636f6e7461637465642061743a0d0a0d0a
555341202d202838343729203731382d303430300909554b202d20303131
3434203031373337203736353935390d0a687474703a2f2f7777772e6d6f
6e6f747970652e636f6d4d6f6e6f7479706520547970652044726177696e
67204f6666696365202d20526f62696e204e6963686f6c61732c20506174
7269636961205361756e646572732031393832687474703a2f2f7777772e
6d6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d735f6172
69616c2e68746d6c687474703a2f2f7777772e6d6f6e6f747970652e636f
6d2f68746d6c2f6d746e616d652f6d735f77656c636f6d652e68746d6c68
7474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f7479
70652f6c6963656e73652e68746d6c0041007200690061006c0020004e00
65006700720065007400610041007200690061006c002000740075010d00
6e00e90041007200690061006c0020006600650064004100720069006100
6c002000460065007400740041007200690061006c0020038803bd03c403
bf03bd03b10041007200690061006c0020004e0065006700720069007400
610041007200690061006c0020004c0069006800610076006f0069007400
750041007200690061006c00200047007200610073007300650074007400
6f0041007200690061006c0020004600e9006c006b00f6007600e9007200
41007200690061006c00200056006500740041007200690061006c002000
480061006c00760066006500740041007200690061006c00200050006f00
670072007500620069006f006e00790041007200690061006c0020004e00
650067007200690074006f0041007200690061006c0020041f043e043b04
43043604380440043d044b04390041007200690061006c00200054007501
0d006e00e90041007200690061006c0020004b0061006c0131006e004100
7200690061006c0020004b007200650070006b006f004100720069006100
6c0020011100e20323006d0041007200690061006c0020004c006f006400
69006100be0054039a000f0101001fffc00398b310143240b80399b30f13
32404110039500500395000200b0034d00c0034d0002006f0391007f0391
0002ffc0034bb22d3132b9ffc0034bb30a0e32104110038b0020038b0080
038b000300a0038b00010020038b0040038b0002ffc0038bb313163240b8
0383b20f1132b9ffc0037bb2303432b9ffc0037bb3101832504114037800
010365036e0023001f037e036e001e001f0363036e001d001f0362036400
0d001fffc00340b30f1032804110033f0001033f03150029001f03410316
0032001f0344031a001b001fffc00375b20e1132b9ffc00375b2282a3241
0a034303180032001f030f030d0034001f03080307b2321f20bb03400001
00400388b3090b3240b80388b2101532bd038503070014001f03800307b2
171f0fbd030a002f030a0002ffc00354b3090d3290410c035400a0035400
02001f036e0001009f036e00010040036eb2090b32410a0345031c001600
1f036b031d0015001f0346031eb2151fc0bb0393000100400392b3090d32
40b8033eb2083340b8033eb30d0e32c04109033e000100b0038e00c0038e
0002ffc00390b326383200412603280030032800020020037f0030037f00
020010038a0030038a0050038a006f038a007f038a009f038a0006000003
89003003890002002f037a0070037700900377009f037a0004ffc00315b2
0f1032b9ffc00315b2242832b903190318b2321f10bb031a0001ffc0031a
b3090e3240b80318b2121332b9ffc00318b30c0e323fbd0373004f037300
0200400374b31718326fbb032a00010040032cb3181b3240b80370b2090c
32bd031703160032001fffc00316b20e1132bd031c031e0016001f031d03
1eb2151fb0411f031e0001000f031f000102ca02d00015001f02d302d500
0d001f02cf02d0000d001f02cb02d0000d001f02cd02d0000d001f02ce02
d0000d001fffc002d0b3090c3240b802d2b3090c32e0411c02e50001005f
02dd009f02e5000202bb02c30030001f02da02b80032001f02d902b9003f
001f02d802b80064001f02b902b80033001f02bab221c81fb802b8b321c8
1f40b8039bb20d1632b9ffc002c3b22b2f32b9ffc002c3b21f2532b9ffc0
02c3b2171b32b9ffc002c3b2121632412502c202c1001c001f02d702c100
24001f02c102c00022001f02bf02c00018001f02c0027400c8001f02b502
35003b001f02b40235003b001f02c402bc001e001f02b702b60038001f02
b3b20ec81fb802b0b207c81fb802afb206c81fb802aeb200c81fb802afb2
502f1fbc02ae02ab001a001f02adb2261a1fb802a8b326241f0fbb023500
0102a50274b21d1f12410a02a1015801f4001f02a000d801f4001f001202
a2b237c81fb80290b2bc201fb9029002904018374025402d40a603302530
2d30a6032025202d203720a6204110028e0005009f028b0001028b028b00
3700200289003002890040028900900289b20437b041fd027400c0027400
020080027400a00274000200600274007002740002000002740010027400
020080027400f002740002003f0285004f028500020090027e0090027f00
9002800090028100040090027a0090027b0090027c0090027d0004009002
74009002750090027700030070027e0070027f0070028000700281000400
70027a0070027b0070027c0070027d000400700274007002750070027700
030060027e0060027f006002800060028100040060027a0060027b006002
7c0060027d000400600274006002750060027700030050027e0050027f00
5002800050028100040050027a0050027b0050027c0050027d0004005002
74005002750050027700030040027e0040027f0040028000400281000400
40027a0040027b0040027c0040027d000400400274004002750040027700
030030027e0030027f003002800030028100040030027a0030027b003002
7c0030027d000400300274003002750030027700030020027e0020027f00
2002800020028100040020027a0020027b0020027c0020027d0004002002
74002002750020027700030010027e0010027f0010028000100281000400
10027a0010027b0010027c0010027d000400100274001002750010027700
0300e0027e00e0027f00e0028000e00281000400e0027a00e0027b00e002
7c00e0027d000400e0027400e0027500e00277b103d041c5027e00d0027f
00d0028000d00281000400d0027a00d0027b00d0027c00d0027d000400d0
027400d0027500d0027700030030027400400274000200c0027e00c0027f
00c0028000c00281000400c0027a00c0027b00c0027c00c0027d000400c0
027400c0027500c00277000300b0027e00b0027f00b0028000b002810004
00b0027a00b0027b00b0027c00b0027d000400b0027400b0027500b00277
000300a0027e00a0027f00a0028000a00281000400a0027a00a0027b00a0
027c00a0027d000400a0027400a0027500a0027700030090027e0090027f
009002800090028100040090027a0090027b0090027c0090027d00040090
0274009002750090027700030020027e0020027f00200280002002810004
0020027a0020027b0020027c0020027d0004002002740020027500200277
0003028101580801001f028001290801001f027f00ec0801001f027e00d8
0801001f027d00b10801001f027c00a60801001f027b00820801001f027a
00370801001f027700260801001f027500200801001f0274001f0801b21f
370f41160235004f0235005f0235006f0235009f023500af023500bf0235
000700af023500cf023500df023500ff02354022040f074f079f07af07bf
0705af07e007020f064f069f06af06bf0605af06e0060220411b020d0001
005f02350001008f02350001007f023500ef02350002002f0235003f0235
0002003f0234004f0234000202350235023402344011ed20ef2a01cf2a01
bf2a01af2a018f2a01410902470104001e001f022000370201001f015840
0c263e1fd8263e1f3726273e1fb8028eb6ec171fb226361fb801bcb22636
1fb80129402b26361fec26361fb126361fa626361f8226361f3726361f32
26361f2d26361f2526361f1f26361f37262a1fb801584022263e1fd8263e
1fbc263e1f27263e1f21263e1f20263e1f3700161600000012110840b902
0d01a6b3c50d0009b801bcb227281fb801bbb227301fb801b8b2274f1fb8
01b7b227621f410901b600270101001f01b5002002ab001f01afb21fe41f
b801adb21fe41fb801acb21fbb1fb801a8b21f341fb8015db2272e1fb801
5bb227cd1f410d0155001f0401001f0154001f0401001f0153001f020100
1f0152b21f561fb80151b21f291fb8012bb227261f410d012a0027012500
1f0129015800e4001f0125001f0401001f0124b21fe41fb80123b21f3b1f
b80122b21f391f410d010800270801001f0106002d0101001f0105001f01
01001f0103b31fbb1fefb901580401400b1fed1f931fec1fe41feb1fb802
01b21fd920b80401b21fcf25b80156400a1fbc2d9e1fbb1f411fb2410a01
580401001f00b101580401001f00b001580401b51fa625891f9bb9015801
25b61f991f2e1f8e2db80801b51f8d1f291f89b901580401b21f8220b802
ab40131f801f301f742de41f731f4a1f611f521f5d25b802abb21f5c1fbc
0801001f0059015802abb61f5025891f491fb80125b21f4725b80401400b
1f461f791f401f271f3920bc02ab001f003801580401b21f372dbc012500
1f003201580125b61f2c1f341f2a25b80801b21f5537b80111402a07f007
90075b0742073b07230722071e071d071408120810080e080c080a080808
060804080208000814b8ffe0402b00000100140610000001000604000001
000410000001001002000001000200000001000002010802004a00b01303
4b024b5342014bb0c063004b6220b0f65323b8010a515ab005234201b012
4b004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382b
b00288b801005458b801ffb101018e851bb0124358b10100858d1bb90001
0119858d5959001816763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594b
b08153205c58b9020f020d4544b9020e020d45445958b90470020f455258
b9020f04704459594bb0e453205c58b90020020e4544b90027020e454459
58b908420020455258b9002008424459594bb8012553205c58b90026020f
4544b90021020f45445958b90a0d0026455258b900260a0d4459594bb804
0153205c58b1d8204544b1202045445958b9250000d8455258b900d82500
4459594bb8040153205c58b9015800264544b1262645445958b923200158
455258b9015823204459594bb02953205c58b11f1f4544b12d1f45445958
b9010d001f455258b9001f010d4459594bb02f53205c58b11f1f4544b125
1f45445958b90135001f455258b9001f01354459594bb8030153205c58b1
1f1f4544b11f1f45445958b91428001f455258b9001f14284459592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b65422b01b331757ec3456523456023456560234560b08b766818b08062
2020b17e754565234520b003266062636820b003266165b075236544b07e
234420b131c34565234520b003266062636820b003266165b0c3236544b0
312344b100c3455458b1c3406544b23140314523614459b33f3c58414565
23456023456560234560b089766818b080622020b1583c4565234520b003
266062636820b003266165b03c236544b058234420b13f414565234520b0
03266062636820b003266165b041236544b03f2344b10041455458b14140
6544b23f403f452361445945695342014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba04
0001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400
000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b
59b0102342b0112342002b2b2b2b2b2b2b2b00b01243584bb035514bb021
535a58b1262645b040614459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b737373737345b0406144180045694445694473737374737373747374
73742b2b2b2b2b2b2b2b2b2b2b2b00737373737373737373737373737373
737373737373737474747474747474747474747474747474747474747575
757374757575752b7300004bb02a534bb036515a58b1070745b040604459
004bb02e534bb036515a58b1030345b0406044b1090945b8ffc06044592b
4569440174007373732b4569442b012b435c58400a0006000702a006a007
02b9ffc00274b31a1d326fbd0277007f02770002ffc00277b22f3132b9ff
c00277b322253240b80274b32f353240b80274b3282a3240b80274b21a21
32b8ffc0b3371a1d32b8ffc0b3251a1d32b8ffc040112d1a1d329025902d
9037a025a02da03706b8ffc0b6a61a1d321fa61fb8028eb22fa60300742b
732b2b2b2b2b2b2b2b742b737459002b2b435c58b9ffc002a1b21c1d32b9
ffc002a0b21c1d322b2b592b73012b2b2b2b002b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b012b2b2b2b2b2b2b73742b2b2b2b2b2b2b2b73732b2b2b
2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b2b2b
7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b73
74752b2b7373732b2b2b2b0000>
[16305 16261 15909 16305 15949 16197 16317 16321 16149 15449 16101 15749 16289
16297 13279 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 8582 38 <00010061ffe7055e05d3001a00d6404e8609891489169f009806c709d403
d40bf503092509280c280d29142916750575098605080713071717131717
29022a03250507280599059709c903c50b053f014f01020152100001e000
f0000200b8ffc0b311183400b8ffc0b30a0d3400b8015a4017182d04080e
400e12340e4b5f0f014f0f010f401518340fb801284022122d0a030fef0e
5600ef00014f0102011a301c011c1527a007010f071f0730070307b8028c
b31b7e53182b4e10f45d714ded4e105df65d4dedf4ed003ffdf42b5d71e4
2b3ffdf42b2b5d71e45d3130005d015d5d5d010506042320001110002120
171617052626232206111016333236043f011f42fecdecfedcfe88017a01
34010da86432fedb1aa576a3cbc8a076aa021b5bf0e9018f015a016e0195
9f5eb0467284eafefafeeaec9600>Arial-BoldMT AddT42Char 
1 13202 54 <0001004affe604f205d3002c01d0403db911b81db628c62c040713071517
131715182b650565287406780d7428d90cd6230c590a550e55225923680c
661267216928672c771d861d96210c1223b8ffe0b31e1f3423b8ffe04065
191a3451225123c122c123047122712381228123e122e123062b0a2a0d24
222423390d34234b0a4b0d442243236a0d6523790d7a22890d8a22a60aa7
0da82213090a090d06220623190a190d16220722230a0d04011756184019
20346f18016f189f180218ba0265001bffc0400c1a391f1b011b2d140300
4801b8ffc040491a203430014001500160019001a001b001c0010801ee04
401a39100401042d2a0918efff17011740131734174b0727261a2e1f27a0
10b01002104b01ef11200030000200192dd253182b4e10f45d4b5358b100
4038594dedf45ded4e10f64dedf42b72ed003ffd712bf45d2be43ffd712b
f45d722be41217395d5d71722b2b435c58b90022ffe0b31b1d3e23b8ffd0
b31b1d3e23b8ffe3b2133922b8ffe0b2133923b8ffc9b2123922b8ffd040
0f12390d2012390a2012390a200f3922b8ffe8400e0c390d200d390a180d
390a1813392b2b2b2b2b2b2b2b2b2b2b2b2b59b1060243545840153a0a3a
0d352235234b0a490d43224623a60aa9220a005d593130005d71015d1325
161633323635342627262726272635343636332004170526262322070615
141716041616151406042320004a01201a9f878f913d4c34b9ee60877fef
a90114011707fed8137d7d81492f2c3801b0cf758cff00bffeeafed601dd
1c9188795134491b122e3b5679ae70c366f2ca0d716335223934252f666d
bd8b7edc6b010100>Arial-BoldMT AddT42Char 
2 1212 70 <00010055ffe8043f043e001900e14051580f59125916680f691269167d18
79199702970cc610c618d710d618e906e908e913e915f80613381338154a
124a164618590c690c073a1237163718037705770f8705860f8919a812a7
16b912b616090eb8ffc0b3181b340eb8ffc0b51214340e330db8ffc0b319
1e340db8ffc0b30f11340dba0104000a02744012110b0040181b34004012
1434003390010101ba0101000402744020170701401214340121002f0d40
1214340d214f0e010e1a1b072114191a5841182b4e10f44ded4e10f65d4d
ed2bf4ed2b003ffdf45de42b2b3ffdf42b2be42b2b3130005d7101715d01
052626232206151416333236370506062322001110003332160431feeb0e
634f697d7f6b50661501142bf4cde9feeb0116edc2e502ec32535491aabd
9c5b6f2fbec20126010401070125a700>Arial-BoldMT AddT42Char 
2 1768 72 <00020041ffe80427043e0014001c01a3b90010fff840460b3999099a0d96
10a805a70abb09bb0db81a0808140148024706460a4f1ea80db606b61ac7
0ac80cd60ad80cf807f70d0d1c0f1c15401b1d3415400e11340f15bf15cf
150315b8ffc0b30f1e3f15b8ffc0b30e173f15b8028d400c0f0e12500e60
0e020e181201b8ffc0b6191b3401331200b8ffc0b31d203400b8ffc0b322
293400b8ffc0b32b2d3400b8ffc0b3181c3400b8ffc0400f0e0f34a00001
0000100002005f1212b80274b3040b1218b8027440240b070021012f1521
4f0e010e1a2f1e5f1e6f1e9f1e041e0f2108400d0f3408191d6941182b4e
10f42b4ded4e105df65d4dedf4ed003fed435c584014184028143f18401e
0f3f18401b103f18401c113f2b2b2b2b593ffd435c58b90012ffc0b32814
3f12b8ffc0b31e0f3f12b8ffc0b31b103f12b8ffc0b21c113f2b2b2b2b59
f45d712b2b2b2b2b435c58b90000ffc0b2123900b8ffc0b2173900b8ffb0
b3090a3e00b8ffc0b241213f2b002b2b2b59e42b1112395d435c5840140e
400f1e3f0e401c113f0e401b103f0e400e173f002b2b2b2b592f3cfd2b2b
722b2b3c0111333130015d71005d2b010506062320272635100033320003
211616333236132626232207061702fa011836e9affeeb85690114d3ed01
1206fd40038261425a270378565c3c3c0101522f9aa1b591dd0108012bfe
c7febd7d8b48016c7a7f43437300>Arial-BoldMT AddT42Char 
2 4976 83 <0002008bfe6c0497043e0010001c009a402e3813481302123403390d3913
341b4403490d4913441bf91b095606560a591256165618591cf607f91b08
0100061ab80274b2050714b8027440160b0b100f0e1721081a701e011e11
290e0e0f26101001b80129400b700080000200191d3f41182b4e10f4714d
ed3c10fd3c10e44e1071f64ded003f3c3fed3fed3f3c3130015d005d0143
58400d6606660a691266166618691c065d59005d13211536363332001110
002322262711210114163332363534262322068b010633ae6ab90102fefc
b9588f4ffee701168e6662828663678804269c5064fedefefdfef6fed946
55fde903b9b3ab9db3a7a29f>Arial-BoldMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/C 38 def
/S 54 def
/c 70 def
/e 72 def
/p 83 def
end
Arial-BoldMT /Encoding get
dup 67 /C put
dup 83 /S put
dup 99 /c put
dup 101 /e put
dup 112 /p put
pop
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut
/IPIXMW+Arial-BoldMT*1 
[67{/.notdef}rp /C 15{/.notdef}rp /S 15{/.notdef}rp /c /.notdef /e 
10{/.notdef}rp /p 143{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -17.52 -17.52 0 0 0 ]msf
361.38 334.711 mo
(SpecC)
[-11.6877 -10.7064 -9.74286 -9.74286 0 ]ysh
gsave
261.9 375.69 mo
235.62 375.69 214.32 334.95 214.32 284.61 cv
214.32 234.33 235.62 193.59 261.9 193.59 cv
288.18 193.59 309.48 234.33 309.48 284.61 cv
309.48 334.95 288.18 375.69 261.9 375.69 cv
eclp
213.78 376.231 mo
310.74 376.231 li
310.74 190.951 li
213.78 190.951 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -96.96 185.28 0 -208.575 480.82 ]ct
<<
/T 1
/W 405 
/H 773 
/M[405 0 0 -773 0 773 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
K)b$6!;4c?"(2*.lI)[5^]+?7p!QhB?iU/kd]*Das8VcW<U!Kc?iU/kd]*Das8Vc?<<-A-s8VB4WWU$9
s7Of?"(2*.lKbJ6WWU$9s7Of?"(2*.lI)[7^]4?,dT$BVs8VB4WWU$9s7P_Yk>aEIs8Vqq\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNOFs7Oi@r`&u+lHlO3^\,rR!FP-ZWoU/\
^\,rR!FP-AWr8pu^\,rR!FP-=WWBm-mT&:I!FP-=WWBm-eQ)NI!FP-=WWBm-crC*RlL1b4WWBm-crDW(
qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A#J-qHWk,4Fp!?\>?g?"<!Pe<s
<T-pY?g?"<!Pe<Z<Vf\r?g?"<!Pe<S<<6IlnZ(NI!Pe<S<<6IlfW+bI!Pe<S<<6Ild&I,]p$u,?<<6Il
d&I,]p"<@?<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5R
<<6Ilo;^ZI!Pe<S<<6Ilg8anI!Pe<S<<6Ild&I,]p%28?<<6Ild&I,]p"NL?<<6Ild&I,]p!?\>?g@<a
go:Cip!?\>?g?FHor8&-p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4Fp%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>?g?"<
!Pe=&<S:@Q?g?"<!Pe<b<Us,i?NBB<WWBm-crCrjqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\f.T[Wk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe<S<<6Ild&I,]p$,Q?<<6Ild&I,]p!Hb@<F>%<WWBm-
crC*RlKbJ4WWBm-crC*RlI)[7WiEi,crC*RlHlO3^\-qnj]+-EqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<doHBI!FP-=WWBm-crC*RlKtV4WWBm-crC*RlI;j4WWBm-
crC*RlHlO3^\."pj&H+elHlO3^\-,Wr)Ec)lHlO3^\,rR!FP-\WoC#Z^\,rR/787R\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uH"HWk,4AWk\5R<<6Ild&I,]p$bu?<<6Ild&I,]p"*4?
<<6Ild&I,]p!?\>?g@0]i2Qgmp!?\>?g?:Dq5OJ1p!?\>?g?"<!Pe<u<SpdW?g?"<!Pe<\<VTQN?i$e6
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g@6_hPpUkp!?\>
?g?@FpSn8/p!?\>?g?"<!Pe="<S^XU?g?"<!Pe<^<VBDn?g?"<!Pe<S<<6Ilor?fI!Pe<S<<6IlgoC%I
!Pe<S<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\6#<SLLS
?g?"<!Pe<`<V08l?g?"<!Pe<S<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Ild&I,]
p"rd?<<-A+lHlO3^\,rR).36?\uN?A\uN?A\uN?A\uN?A\uN?A\uN=[Wk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk\5R<<6Ild&I,]p!?\>?g?"<!Pe<m<Td?_?g?"<!Pe<T<<?0-lHlO3^\,rR!FP-XWog;^^\,rR
!FP-?WWT9$^\,rR!FP-=WWBm-lrE.I1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A^\-&Ur`&u+lHlO3^\,rR!FP-ZWoU/\^\,rR!FP-AWr8pu^\,rR!FP-=WWBm-mT&:I
!FP-=WWBm-eQ)NI!FP-=WWBm-crC*RlL1b4WWBm-crDW(qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A#J-qHWk,4Fp!?\>?g?"<!Pe<s<T-pY?g?"<!Pe<Z<Vf\r?g?"<!Pe<S<<6Il
nZ(NI!Pe<S<<6IlfW+bI!Pe<S<<6Ild&I,]p$u,?<<6Ild&I,]p"<@?<A\(ZWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5R<<6Ilo;^ZI!Pe<S<<6Ilg8anI!Pe<S<<6Il
d&I,]p%28?<<6Ild&I,]p"NL?<<6Ild&I,]p!?\>?g@<ago:Cip!?\>?g?FHor8&-p!?\q?i$e6Wk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp%DD?<<6Ild&I,]p"`X?<<6Il
d&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?NBB<WWBm-
crCrjqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\f.T[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g?"<
!Pe<S<<6Ild&I,]p$,Q?<<6Ild&I,]p!Hb@<F>%<WWBm-crC*RlKbJ4WWBm-crC*RlI)[7WiEi,crC*R
lHlO3^\-qnj]+-EqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<
doHBI!FP-=WWBm-crC*RlKtV4WWBm-crC*RlI;j4WWBm-crC*RlHlO3^\."pj&H+elHlO3^\-,Wr)Ec)
lHlO3^\,rR!FP-\WoC#Z^\,rR/787R\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uH"HWk,4AWk\5R<<6Ild&I,]p$bu?<<6Ild&I,]p"*4?<<6Ild&I,]p!?\>?g@0]i2Qgmp!?\>?g?:D
q5OJ1p!?\>?g?"<!Pe<u<SpdW?g?"<!Pe<\<VTQN?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g@6_hPpUkp!?\>?g?@FpSn8/p!?\>?g?"<!Pe="<S^XU?g?"<
!Pe<^<VBDn?g?"<!Pe<S<<6Ilor?fI!Pe<S<<6IlgoC%I!Pe<S<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\6#<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S<<6IlpSurI
!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Ild&I,]p"rd?<<-A+lHlO3^\,rR).36?\uN?A\uN?A
\uN?A\uN?A\uN?A\uN=[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5R<<6Ild&I,]p!?\>?g?"<!Pe<m
<Td?_?g?"<!Pe<T<<?0-lHlO3^\,rR!FP-XWog;^^\,rR!FP-?WWT9$^\,rR!FP-=WWBm-lrE.I1gg*Z
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-&Ur`&u+lHlO3^\,rR
!FP-ZWoU/\^\,rR!FP-AWr8pu^\,rR!FP-=WWBm-mT&:I!FP-=WWBm-eQ)NI!FP-=WWBm-crC*RlL1b4
WWBm-crDW(qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A#J-qHWk,4Fp!?\>
?g?"<!Pe<s<T-pY?g?"<!Pe<Z<Vf\r?g?"<!Pe<S<<6IlnZ(NI!Pe<S<<6IlfW+bI!Pe<S<<6Ild&I,]
p$u,?<<6Ild&I,]p"<@?<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk\5R<<6Ilo;^ZI!Pe<S<<6Ilg8anI!Pe<S<<6Ild&I,]p%28?<<6Ild&I,]p"NL?<<6Ild&I,]
p!?\>?g@<ago:Cip!?\>?g?FHor8&-p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4Fp%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+
p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?NBB<WWBm-crCrjqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A
\f.T[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe<S<<6Ild&I,]p$,Q?<<6Ild&I,]p!Hb@
<F>%<WWBm-crC*RlKbJ4WWBm-crC*RlI)[7WiEi,crC*RlHlO3^\-qnj]+-EqPq-,\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<doHBI!FP-=WWBm-crC*RlKtV4WWBm-crC*R
lI;j4WWBm-crC*RlHlO3^\."pj&H+elHlO3^\-,Wr)Ec)lHlO3^\,rR!FP-\WoC#Z^\,rR/787R\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uH"HWk,4AWk\5R<<6Ild&I,]p$bu?<<6Il
d&I,]p"*4?<<6Ild&I,]p!?\>?g@0]i2Qgmp!?\>?g?:Dq5OJ1p!?\>?g?"<!Pe<u<SpdW?g?"<!Pe<\
<VTQN?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g@6_
hPpUkp!?\>?g?@FpSn8/p!?\>?g?"<!Pe="<S^XU?g?"<!Pe<^<VBDn?g?"<!Pe<S<<6Ilor?fI!Pe<S
<<6IlgoC%I!Pe<S<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk\6#<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?
<<6Ild&I,]p"rd?<<-A+lHlO3^\,rR).36?\uN?A\uN?A\uN?A\uN?A\uN?A\uN=[Wk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk\5R<<6Ild&I,]p!?\>?g?"<!Pe<m<Td?_?g?"<!Pe<T<<?0-lHlO3^\,rR!FP-X
Wog;^^\,rR!FP-?WWT9$^\,rR!FP-=WWBm-lrE.I1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A^\-&Ur`&u+lHlO3^\,rR!FP-ZWoU/\^\,rR!FP-AWr8pu^\,rR!FP-=
WWBm-mT&:I!FP-=WWBm-eQ)NI!FP-=WWBm-crC*RlL1b4WWBm-crDW(qPq-,\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A#J-qHWk,4Fp!?\>?g?"<!Pe<s<T-pY?g?"<!Pe<Z<Vf\r?g?"<
!Pe<S<<6IlnZ(NI!Pe<S<<6IlfW+bI!Pe<S<<6Ild&I,]p$u,?<<6Ild&I,]p"<@?<A\(ZWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5R<<6Ilo;^ZI!Pe<S<<6Ilg8anI
!Pe<S<<6Ild&I,]p%28?<<6Ild&I,]p"NL?<<6Ild&I,]p!?\>?g@<ago:Cip!?\>?g?FHor8&-p!?\q
?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp%DD?<<6Ild&I,]
p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i
?NBB<WWBm-crCrjqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\f.T[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4F
p!?\>?g?"<!Pe<S<<6Ild&I,]p$,Q?<<6Ild&I,]p!Hb@<F>%<WWBm-crC*RlKbJ4WWBm-crC*RlI)[7
WiEi,crC*RlHlO3^\-qnj]+-EqPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uNO<doHBI!FP-=WWBm-crC*RlKtV4WWBm-crC*RlI;j4WWBm-crC*RlHlO3^\."pj&H+elHlO3
^\-,Wr)Ec)lHlO3^\,rR!FP-\WoC#Z^\,rR/787R\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A
\uN?A\uN?A\uH"HWk,4AWk\5R<<6Ild&I,]p$bu?<<6Ild&I,]p"*4?<<6Ild&I,]p!?\>?g@0]i2Qgm
p!?\>?g?:Dq5OJ1p!?\>?g?"<!Pe<u<SpdW?g?"<!Pe<\<VTQN?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g@6_hPpUkp!?\>?g?@FpSn8/p!?\>?g?"<!Pe="
<S^XU?g?"<!Pe<^<VBDn?g?"<!Pe<S<<6Ilor?fI!Pe<S<<6IlgoC%I!Pe<S<A\(ZWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\6#<SLLS?g?"<!Pe<`<V08l?g?"<!Pe<S
<<6IlpSurI!Pe<S<<6IlhQ$1I!Pe<S<<6Ild&I,]p%VP?<<6Ild&I,]p"rd?<<-A+lHlO3^\,rR).36?
\uN?A\uN?A\uN?A\uN?A\uN?A\uN=[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5R<<6Ild&I,]p!?\>
?g?"<!Pe<m<Td?_?g?"<!Pe<T<<?0-lHlO3^\,rR!FP-XWog;^^\,rR!FP-?WWT9$^\,rR!FP-=WWBm-
lrE.I1gg*Z\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-&Ur`&u+
lHlO3^\,rR!FP-ZWoU/\^\,rR!FP-AWr8pu^\,rR!FP-=WWBm-mT&:I!FP-=WWBm-eQ)NI!FP-=WWBm-
crC*RlL1b4WWBm-crDW(qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A#J-qH
Wk,4Fp!?\>?g?"<!Pe<s<T-pY?g?"<!Pe<Z<Vf\r?g?"<!Pe<S<<6IlnZ(NI!Pe<S<<6IlfW+bI!Pe<S
<<6Ild&I,]p$u,?<<6Ild&I,]p"<@?<A\(ZWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk\5R<<6Ilo;^ZI!Pe<S<<6Ilg8anI!Pe<S<<6Ild&I,]p%28?<<6Ild&I,]p"NL?
<<6Ild&I,]p!?\>?g@<ago:Cip!?\>?g?FHor8&-p!?\q?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp%DD?<<6Ild&I,]p"`X?<<6Ild&I,]p!?\>?g@Bcg8Y1gp!?\>
?g?LJo;Vi+p!?\>?g?"<!Pe=&<S:@Q?g?"<!Pe<b<Us,i?NBB<WWBm-crCrjqPq-,\uN?A\uN?A\uN?A
\uN?A\uN?A\f.T[Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp!?\>?g?"<!Pe<S<<6Ild&I,]p$,Q?<<6Il
d&I,]p!Hb@<F>%<WWBm-crC*RlKbJ4WWBm-crC*RlI)[7WiEi,crC*RlHlO3^\-qnj]+-EqPq-,\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<doHBI!FP-=WWBm-crC*RlKtV4
WWBm-crC*RlI;j4WWBm-crC*RlHlO3^\."pj&H+elHlO3^\-,Wr)Ec)lHlO3^\,rR!FP-\WoC#Z^\,rR
/787R\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uH"HWk,4AWk\5R<<6Ild&I,]
p$bu?<<6Ild&I,]p"*4?<<6Ild&I,]p!?\>?g@0]i2Qgmp!?\>?g?:Dq5OJ1p!?\>?g?"<!Pe<u<SpdW
?g?"<!Pe<\<VTQM?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4F
^]3-iJ,~>

%%EndBinary
grestore
np
f
306.42 195.27 mo
306.42 191.43 li
310.26 191.43 li
310.26 195.27 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[3.84 0 0 -3.84 -27.614 388.18 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
261.9 375.69 mo
235.62 375.69 214.32 334.95 214.32 284.61 cv
214.32 234.33 235.62 193.59 261.9 193.59 cv
288.18 193.59 309.48 234.33 309.48 284.61 cv
309.48 334.95 288.18 375.69 261.9 375.69 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
2.278 lw
318.72 307.41 mo
326.16 307.41 li
@
319.8 311.49 mo
307.44 307.41 li
319.8 303.27 li
319.8 311.49 li
ef
325.14 303.27 mo
337.5 307.35 li
325.14 311.49 li
325.14 303.27 li
ef
gsave
252.78 387.51 mo
267.3 401.97 li
267.3 392.43 li
343.68 392.43 li
343.68 382.59 li
267.3 382.59 li
267.3 372.99 li
252.78 387.51 li
eclp
252.24 402.51 mo
345.36 402.51 li
345.36 370.83 li
252.24 370.83 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -93.12 31.68 0 -234.854 442.36 ]ct
<<
/T 1
/W 389 
/H 133 
/M[389 0 0 -133 0 133 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
TDno,jT+]K!C,kt.KMcLdJs;4lM7I6WWBlMdJs;4inPaP+ospDdJs;4lI)[5^VK==irB*ElI%-_5JY_J
!WYIMd]*>_^sW2`5N:iMlllHp^sW2`5O-[s!PcGI!8%8P5O-ZH!C+BV!;-<m5O-[s!PcFu!!,=Dnfm$:
!C+BJ!!,=LeZ/VK!PcFu!!,=LdOG8^_!(ja!!,=Ld]*>_^sW2`5N;Vcefk,Z^sW2`5O.1,o;Vi+^sW2`
5O-ZH!C+Bl!8dbW5O-[s!PcG%!;lft5N:*8!C+BJ!!,=Ll`00K!PcFu!!,=LdOG>`^]4Aa!!,=Ld]*>_
^u>@a!!,=DdNS]V^sW2`5O.sBh5ULj^sW2`5O-oOqC2M1^sW2`5O-[s!PcG;!9O7^5N:*8!C+BJ!!,=L
d]*>_^sW2`5O.;Zmj\?&^sW2`5O-[s!PcGF!8@JS5N:*8!C+BS!;HNp5O-[s!PcFu!!,=LmjdBJ!C+BJ
!!,=Ld]*>_^sW2`5N:*8!C+B^!:9ae5O-[s!PcFu!!,=LqC:/J!C+BJ!!,=Lh5^1K!PcFu!!,=DdNS]V
_!qEa!!,=Ld]*>_^si>c!!#4`lI%-_5JY\I!C,l2WpZkf^VJ7t!C,Sl+ospDq#K+K!C,ktWWBlMg]7'K
!C,kt.KMcLdJs;4lL:h6WWBlMdJs;4imT(Q,!Wlk!!,=Ld]*>_^uk^a!!,=LdOG8^^sW2`5O/-GfW"te
^sW2`5N:NDocaE$^sW2`5O-[s!PcG@!9!nY5O-ZH!C+BM!<)s!5O-[s!PcFu!!,=Dkp#C:!C+BJ!!,=L
d]*>__#48a!!,=LdOG8^^u,4a!!,=Ld]*>_^sW2`5N;;Zh]`(c^sW2`5O-k#r2Ke4^sW2`5O-ZH!C+Bc
!9aC`5O-[s!PcFu!!>IF+sPM\!C+BJ!!,=Lii;OK!5F`th#Dm~>

%%EndBinary
grestore
np
f
grestore
gsave
252.96 387.69 mo
252.96 387.33 li
267.48 401.79 li
267 401.97 li
267 392.43 li
267.06 392.25 li
267.3 392.13 li
343.68 392.13 li
343.44 392.43 li
343.44 382.59 li
343.68 382.83 li
267.3 382.83 li
267.06 382.77 li
267 382.59 li
267 372.99 li
267.48 373.17 li
cp
267.06 372.81 mo
267.36 372.75 li
267.48 372.87 li
267.54 372.99 li
267.54 382.59 li
267.3 382.29 li
343.68 382.29 li
343.86 382.41 li
343.98 382.59 li
343.98 392.43 li
343.86 392.61 li
343.68 392.67 li
267.3 392.67 li
267.54 392.43 li
267.54 401.97 li
267.48 402.15 li
267.36 402.21 li
267.06 402.15 li
252.6 387.69 li
252.54 387.51 li
252.6 387.33 li
clp
gsave
30 647.55 mo
565.32 647.55 li
565.32 -157.53 li
30 -157.53 li
cp
252.78 387.51 mo
267.24 401.97 li
267.3 392.43 li
343.68 392.43 li
343.68 382.59 li
267.3 382.59 li
267.24 372.99 li
252.78 387.45 li
eclp
251.46 403.29 mo
344.58 403.29 li
344.58 371.61 li
251.46 371.61 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -93.12 31.68 0 -235.634 443.14 ]ct
<<
/T 1
/W 389 
/H 133 
/M[389 0 0 -133 0 133 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
K)b6<!;4iA"(2*.i7%`/+92B6q%_[""!@RCi7%`/+92B6gf=/M"(2*.i7%`/+92B2e.Dd)s8V$H!9F1_
+92B6e5ZTXs8V$,!!")Bs8VcA'a#QXs5;B,"!@RCp#f?C<<HV.s5;B,"!@RCn^J-Q+92B!qZ,=M"!@RC
p!Qh@?f9c@o`,"7p!OQU+5kQI!?_"*<T-pY?f9?4!?^j^&cN@C+5kQI!?_!_<<6IbklBuK!?_!_'`fE7
dJs:ip&.nA<<6IbdJs:in_b#N&HO!3dJs:ip!Qh@?f:PVhZ*[!p!OQU+5k`Nqu?a>p!Qh@?f9?4!?^jt
&a0f-+5kQI!?_!_<<HUd!!(LK!?_!_'`fE7iW/KK!?_!_<<6IbdJs:inb*RN&HO!3dJs:ip"<@A<<6Ib
dJs:ip!OQU+5lMdjo>E(p!Qh@?f9?4!?^j[&HO!3dJs:ip#K-A<<6IbdJs:ip!OQU+5lnogAh6rp!Qh@
?f9Z=p](=:n^8!M+5kQI!?_"'<TI-\?f9?4!?_!_'`fE7dJs:ip!Qh@?f:&Hm/R//n^8!M+5kQI!?_"2
<S:@Q?f9?4!?_!j(%r@C+5kQI!?_!_<<6IbnGqPK!?^j[&HO!3e,TOM!$;46dT$<Ti6hT++8+_1mM,aE
i6hT++8+&^!FOd\!87DR+7[bk!?^7T!;?Ho+8+&^!FOd5!!+27n.jsu!?^7J!!+27do?HL?f9?4!?^j[
&HO!3k5aiK!?_!_<<6IbdJs:ip%oKV'`fE7dJs:ip"i^A<<6IbdJs:in^8!M+5l\ii;`m#p!Qh@?f9H7
rVus@p!OQU+5kQI!?_"!<U*Qb?f9?4!?^j[&HO!3r;bCK!?_!_<<6IbhuN?K!?_!_'`fE7dJs:ip%28A
<<6IbdJs:in^eBN&HO!3dJs:ip!Qh@?f:5MkPtW*p!OQU+5kQI"!@29<Rb"L?f9?4!?^jk&b-G6+5kQI
!$B/Zh#Dm~>

%%EndBinary
grestore
np
f
340.26 375.93 mo
340.26 372.09 li
344.1 372.09 li
344.1 375.93 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[3.84 0 0 -3.84 -208.274 354.34 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!!TC!!$#!!!!`K!!$#!!!!TC!!$#!!!!`K!!$#!~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
246.6 393.69 mo
261.06 408.21 li
261.06 398.61 li
337.5 398.61 li
337.5 388.77 li
261.06 388.77 li
261.06 379.23 li
246.6 393.69 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
ef
.526 lw
246.6 393.69 mo
261.06 408.21 li
261.06 398.61 li
337.5 398.61 li
337.5 388.77 li
261.06 388.77 li
261.06 379.23 li
246.6 393.69 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Arial-BoldMT gcheck setglobal} if
1 7844 36 <00020000000005bf05ba0007000a0141b90007ffd8400937393406283739
3407b8ffc04009283534064028353407b8ffd84050212734062821273429
002a042a05280a2f0c380037053f0c6a006a02650366056808670ae8030f
4a060102080901030a090904070901012000071400000706090404200506
14050506080a401a1d3e0ab8ffc0400b1a1d340a25020303060409b801bc
400e0607020504040100080c17171a00b80261400b1f0101200130018001
0301b8022440091f0901300980090209ba02240004026140092005010519
0b5e63182b4e10f45d4dfd19f65d71f45d7118fd4e456544e6003f3c3c10
3c3f3c4ded1112392f3cfd2b2b3c87052e2b877dc4872e182b877dc40710
3c3c87c4c4b10602435458b40934090d34002b593130014bb00b534bb01e
515a58b90003fffeb208040abafffe0007fffcb106043838383838590171
5d2b2b2b2b2b2b212103210321012113030305bffebe80fdb679fec6023b
01392acac6014dfeb305bafc8a0220fde000>Arial-BoldMT AddT42Char 
2 434 68 <00020049ffe8042e043e0023003201714068071a081c051d161a4a1b481c
4925db10df11093619461957266619672686269219931aa61ab91bc71ac8
1b0c06060d151606191627062915591977028602a606b506c6060cbf34d9
10021d243231112c0d24402b2e3424402228342440191d346f24fc240224
461db8ffc040300e0f343d1d01001d101db01df91d041d1d2c013300400e
0f340f001f0002005521401c113f21401b103f2140181a3421b80274b504
070c0d0a2cb8ffc0b31c113f2cb8ffc0b31b103f2cb8ffc0b3181a342cb8
02744040140b1e3126082909280d591f0c9f0c021f0c01ff0c010c400e16
340c1a4f340134600001008e300101013329215f1701df17014f175f176f
17031719336941182b4e10f45d71724dedf471ed5d4e105df62b5d71724d
edf4e4fd3c003fed2b2b2b3f3c3ffd2b2b2bf45d2be412392f5d712bb106
02435458b22f1d017159edb10602435458b90024ffc0b71b1d3454246424
025d2b595d2b2b2b111239030e103c3c3c313001715d005d710127363633
321616150314161721262726270606232226353436363736373534262322
060106060706151416333237363736350165ff2bd2cfbcb84b031b25feea
0b10070348a45da4bd569b92c54c506f4b54015e36ea243758444c453310
0b02e22e9a945989b7feb88c854c1c3719084646b2885a8d4b1c25201c51
453bfed2123218273c3b563226372465>Arial-BoldMT AddT42Char 
2 960 69 <00020087ffe8049405ba000f001c009db90012fff840310b39371b471b02
125606560a56165618591cf7070635043b0d3b13351b45044b0d4b13451b
940799090a0c0e010201001ab80274b2050714b8027440130b0b0f000a17
21081a701e011e10290203260fb80129400c01700080000200191d3f4118
2b4e10f4713c4dedfd3ce64e1071f64ded003f3c3fed3fed3f3c31300071
5d015d4358400b6606660a66166618691c055d59005d2b33112111363332
1211100023222627151314171633323635342623220687011982b2c2fefe
fdb95bb140123449795d838467658605bafdf094fee7fef9fef0feda5b59
9c022aa54f709fabb6a19d00>Arial-BoldMT AddT42Char 
2 3280 76 <00020093000001ac05ba000300070077b90009ffc0403f110a3f40095009
028009b009c009d009ef09051f0960097f09a009b0090503060700050403
0f00014000d000e00003005d02010006050607040a0207260104b8ffc040
092124340419083f3c182b4e10f42b3c4dfd3c003f3c3f3c3f3cfd5d713c
0305103c3c103c3c313001715d722b1311211101112111930119fee70119
04b60104fefcfb4a0426fbda>Arial-BoldMT AddT42Char 
2 4502 81 <0001009100000459043e0016009f4018071317135a08680804b804013408
34104408440fe9100506b80274401d11070e0d060c0b0b01000a02012616
0040202434af0001ff0001001a18b8ffc040162224349018a018027018f0
1802ef1801180a0b260c0eb80129b20d0d0cb8ffc0400f202434a00c01f0
0c010c19173f3c182b4e10f471722b3c4d10ed10fd3c4e105d71722bf671
722b3c4dfd3c003f3c3c103c3f3c3fed3130005d01715d21211134262623
2206061511211121153633321e02150459fee724513949742bfee701058b
d35d9a4f1f021eac65385084b2fe1f04269cb44368847b00>Arial-BoldMT AddT42Char 
2 4736 82 <00020052ffe8049a043e000d001900974048e801e708f713f71504c702e8
05021219051909025910561356165918970298069808970cb809d502db05
dc09d50ce705e706e80d10a708cb02cc06c308c60c057508890684080311
b80274b20a0b17b80274401404071439071a601b701b021b0e2100191a58
41182b4e10f44ded4e1071f64ded003fed3fed313000715d015d71435840
09691066126616691804015d59005d015d13341236333200151400232224
26251416333236353426232206528afd9cf10134fec9ec92fef78a012096
6e6e95956e6e9602228c01068afec7eff1fec384ffa89ea8a8a09ca8a800
>Arial-BoldMT AddT42Char 
2 5486 85 <0001008700000337043e001000a84028970501090e01530566057505032f
12580e680e7012040a090f0c1f0c028f0cff0c023f0c4f0c020cb8027740
29070701000a0302060a28000910093009700904091a7f129f12025f127f
12af12d01204121000260103b80129400b02028001a001020119113fb901
1c00182b4e10f4713c4d10ed10fd3c4e105d71f65d194de400183f3c3f3c
3fed5d717239323130015d005d71004bb017534bb035515a58b10a323859
005d212111211536363332170726232206061101a0fee70105436b446059
57473d3b522f0426976b4435f52e41aafef1>Arial-BoldMT AddT42Char 
2 5714 86 <00010030ffe80410043e002a02c240c00611062308271711172398129814
9727952a09071446140212bb0db90ec721e523f80df62206290d550d650d
950b9712a722b90c07412340244426672264268712871486228324093726
4506460b4a0d4f0f462142220722242726370c352135223523352407060a
05110921180d270c22222223072422402c730c781479157629752a881584
2a9a15952ab422b4230d80018f178c18992aa92ab02c0617211640212334
16401c1f341f1601df16011633082150258f25022540181d34251a2cb8ff
c04017110a3f502c01302c012f2c012c1e213010011033012100b8ffc0b3
0f093f00b8ffc0b3110a3f00b8ffc04009090d3400192b78b8182b4e10fc
2b2b2b4dedf471ed4e105d71722bf62b714dedf471722b2bed00b1060243
54584035060101060116012622362146215401591764016917f6010a0117
02041a21220228130d0c02281a5f04010446280b501a011a4613073ffd5d
3ffd5d1112173911121739111217395d711bb90022ffcbb3282a3421b8ff
cbb3282a3422b8ffe0b31e243421b8ffe0b31f243422b8ffe0b3191a3421
b8ffe0401b191a346b0d0136224622980d9422c422d4220621220c0d0404
1a00b8ffc0b5191b34003301b8ffc0b3172d3f01b8ffb0b3090a3e01b8ff
c0b322253401b8ffc0401d1a1c3400013001400150010460018001f00103
00011001500160010401b8ffc0b313163401b80101404d0004015f04f004
020446280b1640191b3416331740172d3f1740090a3e174035373417402b
2e34174025293417401a1c340f171f175f176f170417551a402224340f1a
01501aff1a021a4613073ffd5d712bf45d2b2b2b2b2b2be42b3ffd5d71f4
2b5d71722b2b2b2be42b111217395d712b2b2b2b2b2b59313001715d0071
7171715d5d435c58b90024ffc940090b123f0f280b123f21b8ffecb60d39
0c140c3921b8ffecb20c3922b8ffeab10b39002b2b2b2b012b2b5900715d
132516163332373635342726272427263534363332161705262623220706
1514171604171615140623222630011a126e636d3725141549feac5b7eda
e5dad428fef7115f586f30201c2601c15958f4efd9fd012f2b5255281c2f
201514114b3e56998abc8e8b313e421f16231e151c664a4b8692d2b0>Arial-BoldMT AddT42Char 
2 6552 87 <0001001fffe80291059d001900cd402920002001230a290f3a0e4a0e590f
07191500180316150017121314011712021401180309070a070c18b80101
400f0017a017b017036017a017c0170317b80104b2150114b80274b30015
0607b80274400e0c0b092f0a2f00002f015f010201b80104402818032617
1255153f149f14af1403601480149014d014f01405001410142014301404
14191a78a0182b4e10f45d71724bb037534bb03b515a58b90014ffc03859
3c4dfc3cfd3cf45d3c10f419e400183fed3f3cfd3c10f45d71e411123911
330f0f0f0f3130015d011523111416163332371706232226262726351123
3533352511027ac00b271c274a18627c4c7a390b098181011a0426e0fe54
822b1c1bda2a335145319501cfe0d3a4fe89>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/A 36 def
/a 68 def
/b 69 def
/i 76 def
/n 81 def
/o 82 def
/r 85 def
/s 86 def
/t 87 def
end
Arial-BoldMT /Encoding get
dup 65 /A put
dup 97 /a put
dup 98 /b put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT*1 
[65{/.notdef}rp /A /.notdef /C 15{/.notdef}rp /S 13{/.notdef}rp /a 
/b /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n 
/o /p /.notdef /r /s /t 139{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -17.52 -17.52 0 0 0 ]msf
310.2 462.81 mo
(Abstraction)
[-12.6547 -10.7098 -9.74637 -5.83929 -6.82065 -9.74637 -9.7464 -5.83926 -4.87582 -10.7098 0 ]ysh
gsave
343.68 97.771 mo
329.22 112.231 li
329.22 102.69 li
252.78 102.69 li
252.78 92.851 li
329.22 92.851 li
329.22 83.25 li
343.68 97.771 li
eclp
252.24 112.77 mo
345.36 112.77 li
345.36 81.09 li
252.24 81.09 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -93.12 31.68 0 54.8859 442.36 ]ct
<<
/T 1
/W 389 
/H 133 
/M[389 0 0 -133 0 133 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
TDno,jT+]K!C,ktWWBlMdJs;4lM2p`.KMcLdJs;4lJ/E6WWBlMdJs;4imK"O5JZagirB*ElI)[5^VJ:u
!WYIMdOG8^^sW2`5O.F3m&C*$^sW2`5N:*8!C+Bs!8%8P5O-[s!PcG,!;-<m5O-ZH!C+BJ!!,=LnuCZK
!PcFu!!,=DeKXu:!C+BJ!!,=Ld]*>__!(ja!!,=LdOG8^^sW2`5O/3IeuAbc^sW2`5N:TFo-+3"^sW2`
5O-[s!PcGB!8dbW5O-ZH!C+BO!;lft5O-[s!PcFu!!,=DlQYO:!C+BJ!!,=Ld]*Da^]4Aa!!,=LdOG8^
^u>@a!!,=Ld]*>_^sW2`5N;A\h')ka^sW2`5O-q%qPjS2^sW2`5O-ZH!C+Be!9O7^5O-[s!PcFu!!,=D
dNS]V^sW2`5O.=0n#?E'^sW2`5O-ZH!C+Bp!8@JS5O-[s!PcG)!;HNp5N:*8!C+BJ!!,=Ln#GHK!PcFu
!!,=LdOG8^^sW2`5O-[s!PcG4!:9ae5N:*8!C+BJ!!,=LqPr5K!PcFu!!,=Lh(&+J!C+BJ!!,=Ld]*>_
_!qEa!!,=DdNS]V^si>c!!#4`lI)[5^VJ7t!C,l2.debe5JY\I!C,ktWWBlMq#K+K!C,Sl+ospDg]7'K
!C,ktWWBlMdJs;4lL6:`.KMcLdJs;4lI2a7WkZ?t!!,=DdNS]V^uk^a!!,=Ld]*>_^sW2`5O/+qfI?nd
^sW2`5O.+*or8&-^sW2`5N:*8!C+Bj!9!nY5O-[s!PcG#!<)s!5O-ZH!C+BJ!!,=Ll)O$K!PcFu!!,=D
dNS]V_#48a!!,=Ld]*>_^u,4a!!,=LdOG8^^sW2`5O.m@hl6^l^sW2`5N:9=r#u/+^sW2`5O-[s!PcG9
!9aC`5O-ZH!C+BJ!!>INWiFRK!PcFu!!,=DiZdn:!'c\Ih#Dm~>

%%EndBinary
grestore
np
f
grestore
gsave
343.86 97.591 mo
343.98 97.771 li
343.86 97.951 li
329.4 112.41 li
329.1 112.471 li
328.92 112.231 li
328.92 102.69 li
329.22 102.93 li
252.78 102.93 li
252.6 102.87 li
252.54 102.69 li
252.54 92.851 li
252.6 92.67 li
252.78 92.55 li
329.22 92.55 li
328.92 92.851 li
328.92 83.25 li
328.98 83.13 li
329.1 83.01 li
329.4 83.07 li
cp
329.04 83.43 mo
329.46 83.25 li
329.46 92.851 li
329.4 93.03 li
329.22 93.091 li
252.78 93.091 li
253.02 92.851 li
253.02 102.69 li
252.78 102.451 li
329.22 102.451 li
329.4 102.51 li
329.46 102.69 li
329.46 112.231 li
329.04 112.05 li
343.5 97.591 li
343.5 97.951 li
clp
gsave
30 647.55 mo
565.32 647.55 li
565.32 -157.53 li
30 -157.53 li
cp
252.78 102.69 mo
329.22 102.69 li
329.22 112.231 li
343.62 97.831 li
343.68 97.711 li
343.62 97.711 li
329.22 83.31 li
329.22 92.851 li
252.78 92.851 li
eclp
251.46 113.55 mo
344.58 113.55 li
344.58 81.87 li
251.46 81.87 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[0 -93.12 31.68 0 54.106 443.14 ]ct
<<
/T 1
/W 389 
/H 133 
/M[389 0 0 -133 0 133 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
TDno]jUpto"!@RCi7%`/+92B6e5ZTXs8V$Q!8IPV+92B6e.i'-s8V$4!;QTs+92B6e5ZTXs8V$,!!=>C
s7,RjjUhS:s8V$,!!=>Cs7OlA!+,g-s5;B,"!@RCp!a]Y+92B!k5aoM"!@RCp!ctD?iU/ae,TRms8VWd
&_IZr+5kQI!?_!k<V9>m?f9?4!?_!_'`fE7nc7VK!?_!_<<6IbeH#RK!?^j[&HO!3dJs:ip$#KA<<6Ib
dJs:ip!OQU+5m(tec5^mp!Qh@?f9iBo)Je5n^8!M+5kQI!?_",<SpdW?f9?4!?_!d(&SdI+5kQI!?_!_
<<6IblN$,K!?^j[&HO!3dJs@koi5#A<<6IbdJs:ip#6_V'`fE7dJs:ip!Qh@?f:VXh#IHtn^8!M+5kfP
q>^O<p!Qh@?f9?4!?_"%($653+5kQI!?_!_<<6IbdJs:in^8!M+5l2[mf3A1p!Qh@?f9?4!?_"0(#'H(
+5kQI!?_!h<VTPp?f9?4!?^j[&HO!3mf;DK!?_!_<<6IbdJs:ip!OQU+5kQI!?_!s<UEce?f9?4!?^j[
&HO!3q>f1K!?_!_<<6Ibh#R-K!?_!_'`fE7dJs:ip$l&A<<6IbdJs:in^J-P&J6)bi6hT++8+&^!FOdH
!:Bgf+8+%s!?^7J!!+27q,Q-K!FOd5!!+23g_'8m!?^7J!!+27dT$<Ti:$a,!!+27dM2d)i6qZ-!$Cm^
<<6IbdJs:in`LMN&HO!3dJs:ip!Qh@?f:e]fDkpop!OQU+5kuUo`,"7p!Qh@?f9?4!?^k&&`F<&+5kQI
!?_!b<W5u!?f9?4!?_!_'`fE7klBuK!?_!_<<6IbdJs:inbj'N&HO!3dJs:ip#&jA<<6IbdJs:ip!OQU
+5lbkhZ*[!p!Qh@?f9N9qu?a>n^8!M+5kQI!?_"#<TmE`?f9?4!?_!_'a#Q9!!(LK!?_!_<<6IbiW/KK
!$@F)h#Dm~>

%%EndBinary
grestore
np
f
340.26 86.19 mo
340.26 82.35 li
344.1 82.35 li
344.1 86.19 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
gsave
clp
[0 -1 -1 0 694.6 167.656 ]ct
[3.84 0 0 -3.84 81.466 354.34 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!#DT!!$#!!!#tt!!$#!!!#DT!!$#!!!#tt!!$#!~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
337.5 103.951 mo
322.98 118.471 li
322.98 108.871 li
246.6 108.871 li
246.6 99.031 li
322.98 99.031 li
322.98 89.491 li
337.5 103.951 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
ef
337.5 103.951 mo
322.98 118.471 li
322.98 108.871 li
246.6 108.871 li
246.6 99.031 li
322.98 99.031 li
322.98 89.491 li
337.5 103.951 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Arial-BoldMT gcheck setglobal} if
1 8896 39 <000200940000056105ba0010001f007f40332805280a47176504650c052a
173917481659166816053917361b871b9905960b051f1125010002131225
0f10081927af070107b8ffc0b3090b3407b8028c40138021012021302102
2111122000201030100210b8028bb3203153182b4e10f45d3c4dfd3c4d10
5d71f62b714ded003f3cfd3c3f3cfd3c3130005d71015d13213217161612
1514070607060706232101113332373e023534262627262394021db76081
b8602d37664d8362a4fdd30128dd7c37485f3c3c6c533eb505ba1c26c2fe
e7ceb583a0634b2a1f04c2fc350e1256c5aaaab666120e00>Arial-BoldMT AddT42Char 
2 3958 79 <00010093000001ac05ba00030053b90005ffc04029110a3f400550050280
05b005c005d005ef05051f0560057f05a005b0050502010003000a020326
0100b8ffc040092124340019043f3c182b4e10f42b3c4dfd3c003f3c3f3c
313001715d722b3311211193011905bafa46>Arial-BoldMT AddT42Char 
2 7072 89 <0001000b0000045a0426000b011b401505281a2f3407281a2f3406281a2f
3408281a2f3403b8ffd8b31a2f3404b8ffc040201a3a349a040106030b08
080a0c0b1501150212031a091a0a22002d0bc70b0c00b8fff040161d2034
0a00050b1400190b25002a0b34003a0b870009b10602435458b40a010d0c
04b8ffc0400b091734040100090106000a003f3f3c1112392b0111123939
1b40120b000a040b0a0909020201060b000a09390db8ffc040181c28340b
0d1f0d300d400d040d17171a100a3f0a4f0a030ab80230400b0402390b04
3f044f040304ba02300001ff80400f0c350001200140010301190cc4a018
2b194e10f45d2b184ded5ded10fd5d194e456544e65d2b184ded003f3c3f
3c103c103c12390112393959313001712b5d005d2b012b2b2b2b2b210121
13173637363713210101b7fe540127c83a17060e10ca0121fe5a0426fde2
b545162d2d021efbda00>Arial-BoldMT AddT42Char 
2 8496 92 <0001000efe510452042600130134b41228050113b8ffe040180c0f340816
0d0f3407160d0f3406160d0f3405160c0f3402b8ffc0401f1a3a34050606
040d0b0e061002001306041302040303010100061360100110b801af4012
0b0f0d2f0e280020153015601503f0150115b8ffc0b322263415b8ffc040
121c1e341517171a043903401819347f030103b80127400902401819347f
020102b801274012013900401c36342000300002001914c4a0182b4e10f4
5d2b4dfd19f45d2bf45d2b18fd4e456544e62b2b71724d10f4e4003fed5d
2f3f3c103c103c0112391139001112391239391139070e103c3130002b01
2b2b2b2b2b5d4bb010534bb03a515a58b2041000bafff00001fff0b10310
013838383859435c58b90005ffe8400e0d113f131013193f131012183f05
b8fff0b313193f05b8fff0b212183f012b2b2b2b2b59132113132101070e
032322272716333236370e012bfef80123fe89432543577f50514e194235
625e190426fd0e02f2fc02b95d623d2211dc0d735900>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/D 39 def
/l 79 def
/v 89 def
/y 92 def
end
Arial-BoldMT /Encoding get
dup 68 /D put
dup 108 /l put
dup 118 /v put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT*1 
[65{/.notdef}rp /A /.notdef /C /D 14{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /.notdef /n /o /p /.notdef /r /s 
/t /.notdef /v 2{/.notdef}rp /y 134{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -17.52 -17.52 0 0 0 ]msf
294.12 126.69 mo
(Descriptive)
[-12.653 -9.74463 -9.74463 -9.74457 -6.81897 -4.87402 -10.7081 -5.83752 -4.87402 -9.74463 0 ]ysh
315.181 121.291 mo
(Capability)
[-12.6477 -9.73938 -10.7028 -9.73932 -10.7029 -4.86877 -4.86884 -4.86877 -5.83228 0 ]ysh
342.42 222.57 mo
381 222.57 li
381 118.65 li
342.42 118.65 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
f
.876 lw
342.42 222.57 mo
381 222.57 li
381 118.65 li
342.42 118.65 li
cp
@
381 222.57 mo
cp
@
336.18 228.75 mo
374.82 228.75 li
374.82 124.89 li
336.18 124.89 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9098 .93333 .96863 colr
f
336.18 228.75 mo
374.82 228.75 li
374.82 124.89 li
336.18 124.89 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
374.82 228.75 mo
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Arial-BoldMT gcheck setglobal} if
2 4066 80 <0001007e00000698043e0027013bb90029ffc0405d110a3f0506060c1506
160c340334083418342344024508451844230c20032f295309602980299f
29a406a707a60cb506b50cb029d029e0290e00292f2950299f29bf29df29
0629401a1c343f2950298029d029e02905072104071a1d16b80274b20a07
21b80274401e0407101111271b1c1c26270a0100060f10261211405a3560
11016f110111b80246400f1a1b261d1c405a356f1c01601c011cb80246b4
2526262701b80129b2000027b8ffc0b30f093f27b8ffc04036110a3f2740
5a352740413527403c35274024273427403a3d342f27cf27df27030f271f
27802703002720273027ff2704271928e33c182b4e10f45d71722b2b2b2b
2b2b2b3c4d10ed10fd3cf65d712b3cfd3cf6715d2b3cfd3c003f3c3f3c3c
103c103c103c3fed3fed0111123900111239313001722b715d005d012b13
211536333216173636333216171615112111342726232206061511211134
2626232206061511217e01038bc066963046a25c75a2281dfee71d27513b
682efee71e3f3641682dfee7042691a9545555545f5c4498fd59025f9e2e
3c488b96fe0202469b5a2c468499fdfc>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/m 80 def
end
Arial-BoldMT /Encoding get
dup 109 /m put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT*1 
[65{/.notdef}rp /A /.notdef /C /D 14{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /.notdef /v 2{/.notdef}rp /y 134{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -17.52 -17.52 0 0 0 ]msf
360.72 214.35 mo
(SystemC)
[-11.6877 -9.74289 -9.74286 -5.83578 -9.74286 -15.5771 0 ]ysh
229.86 274.11 mo
268.08 197.73 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
222.18 254.79 mo
252.6 195.63 li
@
237.12 284.43 mo
279.48 206.01 li
@
245.4 292.71 mo
289.44 212.61 li
@
257.76 300.15 mo
296.04 227.73 li
@
276.36 291.87 mo
302.22 243.27 li
@
262.02 285.87 mo
240.42 285.87 222.96 268.41 222.96 246.87 cv
222.96 225.33 240.42 207.87 262.02 207.87 cv
283.56 207.87 301.02 225.33 301.02 246.87 cv
301.02 268.41 283.56 285.87 262.02 285.87 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.28627 .47451 .75294 colr
ef
262.02 285.87 mo
240.42 285.87 222.96 268.41 222.96 246.87 cv
222.96 225.33 240.42 207.87 262.02 207.87 cv
283.56 207.87 301.02 225.33 301.02 246.87 cv
301.02 268.41 283.56 285.87 262.02 285.87 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
1 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Arial-BoldMT gcheck setglobal} if
2 6840 88 <0001008dffe8045304260016009c401757116711960503090619063c023c
114b024b11e702070fb802744011040b16000a1514140a09061314261515
00b80129400e1640202434af1601ff1601161a18b8ffc040162224349018
a018027018f01802ef1801180a0b260908b8ffc0400f202434a00801f008
010819173f3c182b4e10f471722b3c4dfd3c4e105d71722bf671722b4ded
3c10fd3c003f3c3c103c3f3c3fed3130005d015d21350606232226263511
21111416163332363635112111034e3abd696baa4c01191f523f48722a01
199f55625eaa9602a0fe18e0653b4f75e401c0fbda00>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/u 88 def
end
Arial-BoldMT /Encoding get
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT*1 
[65{/.notdef}rp /A /.notdef /C /D 14{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -13.14 -13.14 0 0 0 ]msf
265.92 284.37 mo
(ConcurrenC)
[-9.49234 -8.03369 -8.03369 -7.3111 -8.03369 -5.11682 -5.11682 -7.3111 -8.03369 0 ]ysh
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Arial-BoldMT gcheck setglobal} if
1 10858 48 <000100910000061905ba000c0218400b0b032608260b0304030103b8ff80
40091c3a340a203a3b3409b8ffe0b33a3b3409b8ffe040a41c2e340a201c
2e340609080ae309ec0a0404090a0a13021c0410091f0a23022c0420092f
0a6702680465096a0a77027804a409aa0ab509ba0af609fa0a169f049009
9f0ac609c90ad702d804d609d90ae702e804e509ea0a0d7709780a83028c
0483098c0a900207580b65026a046709680a760279040744024b0444094b
0a57085709580a07180a2f0e34023a0434093b0a3f0e0703020c04060909
0a15021a04170907b10602435458401f0204030a09050c070732060e0c32
0000031003020850080d340b50080d3403b8ff80400e0b0d3408400e2734
0b400e273403b8ff9c40100e2734030b08030100040102070a0008003f3c
3c3f3c111217392b2b2b2b2b2b5d012fed10d4ed111217391bb8ff3b402d
030a09200408090932030414030304020b0a0a320302140303020b080303
0c0402020c0a0a090907081f0e010eb8010db307060504ba02380005ffc0
b35b5d3405b8ffc0401753543405320740077f080108bd7f030103bd0b20
0b0c02b802384012010000405b5d34004053543400321f0c010cb8010db3
0d3175182b10f471ed2b2b103cee103c1a1910fd71fd713c1a1810fd2b2b
ee103c10e471003f3c103c103c3f3c12173987052e2b877dc4872e182b87
7dc42b593130014bb0135358b90008ffe0b10b20383859015d5d5d5d5d5d
71722b2b2b2b002b715d331121010121112111012101119101bb010a0107
01bcfeedfeddfee3fede05bafc1803e8fa460482fb7e0482fb7e>Arial-BoldMT AddT42Char 
2 1528 71 <00020054ffe8046105ba000f001c0090402d125906590a59125616561859
1c98079909f80909701e801e023a03340c3a1534194a03440c4a15441999
090914b80274b2050b1ab80274400e0b070e0f0001000a17290e0d2601b8
0129400f0f001a8f1e011e102108191d583c182b4e10f44ded4e1071f63c
4dedfd3ce6003f3c3f3c3fed3fed3130005d01715d4358400d6906690a69
1266166618691c065d592121350606232200111012333217112101141716
3332363534262322060461fefb41b15ab7fefbfec2b2820119fd122f447a
6188846764879c5b5901270108010e0119940210fc70aa4c6ea5a4b7a19f
>Arial-BoldMT AddT42Char 
Arial-BoldMT /CharStrings get begin
/M 48 def
/d 71 def
end
Arial-BoldMT /Encoding get
dup 77 /M put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/IPIXMW+Arial-BoldMT*1 
[65{/.notdef}rp /A /.notdef /C /D 8{/.notdef}rp /M 5{/.notdef}rp 
/S 13{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
IPIXMW+Arial-BoldMT nf
IPIXMW+Arial-BoldMT*1 [0 -17.52 -17.52 0 0 0 ]msf
259.2 355.47 mo
(SpecC)
[-11.6877 -10.7064 -9.74286 -9.74286 0 ]ysh
280.199 358.41 mo
(Models)
[-14.608 -10.7186 -10.7186 -9.75513 -4.88458 0 ]ysh
258.359 196.41 mo
(SystemC)
[-11.6772 -9.73236 -9.73233 -5.82529 -9.73233 -15.5667 0 ]ysh
279.42 189.15 mo
(Models)
[-14.5975 -10.7081 -10.7081 -9.74463 -4.87408 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Arial-BoldItalicMT Initial
ct_T42Dict begin
-0.559 -0.375 1.156 1
 256 array 0 1 255 {1 index exch /.notdef put} for  /Arial-BoldItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f329dc2940f000000cc000000566376
74204dfc6493000001240000069c6670676d499f2d47000007c0000005fb
676c7966242cb714000057500002574c68656164c513962b00000dbc0000
0036686865610c5208bb00000df400000024686d7478b7fafdf400000e18
00000ef06c6f636104ee6a8000001d0800000ef46d61787009470dc00000
2bfc000000206e616d65689182f400002c1c00001efc70726570599dddfc
00004b1800000c3667646972000000000000000000000000000103d402bc
00050000059a0533001e011b059a0533005a03d1006602120805020b0704
02020209020400000a870000000000000000000000004d6f6e6f00210020
fffc05d3fe510133073e01b2400001bfdff70000000005ba001b05ba001b
05a6001b0426001b0000ffe50000ffe50000ffe5fe6bffe505ba001bfe6c
ffe502e70000011c0000011c0000000000000000007a00d60127011800f5
011200af011d00ca00b400d8012a007c00cd01640016001700fc02240020
010500060018005400aa00ca0107005900b3ffe900a8005700ec04010091
00e0012c005600cc010e00030055009d004e0115ffab00eb0102ffe00017
003a005000900114057605d80182000501030285ff2f000d040100830014
003e009c00d3017c09b5ffd5003700bd044cfff100980118022a000e0070
00e600f00127012d0238025dff6d0061007f00c1010603430593ff2c006e
00fc0386ffa3ffe9000700530055005f007e009700eb013e01c002af0564
001c003f0048004a005d006d00a600ad026605f0000100020026006c00a8
00c700e801ad01db03e803f90408045e048c0525fe3f000e002200330038
0057005f00620073008c009800be0100011f015201990532fd8100160020
00260031003800800082008900b30100010e011101150156019d027e02cf
02ee04a905d8ffcf002600340076007e008300c100c500eb00f20106012e
0130018201b901d10201027902fa0320ff00ffbc002800470052005c0077
00810090009900b200bc00cc01c1024d0343037703b004eb04fbfec4000c
005a0062007b00b300c900d500d60112011c022602ec0321038503a303cc
03f503f90413048304fbfee0002200300031004c004c0053005d0073007a
0087008e00a100ab00b600ba00c100d000d100db00e501150138016b017c
019e01bb01f601fa02210222023c026f029502b002ba02e2031603510354
03710396039a03c603d304110442044b049d04b604da062d06e80761fea5
fee3ff4eff58ff81ff92ffbbffc2ffd3ffee0009000d00220023002c0069
006c00710077007f008c00ae00be00be00c800d700d900da00dc00e500f5
0100010c011b0135014a01530155016c0172018e018f0194019801c501ce
020a02110215024f02500267028602c802cf0339033b03b8042804320445
045a046b0474048605320532054d058c05a805aa05ab05f005fc061206aa
080008ccfd2afddefe68fe76feddff0aff0eff1eff30ff69fff50005001e
0038006100670087009b00a100a400a600ac00c000c400cc00d100d400d9
00dc00dd00de00df00e500f300fc0114011601180118011b012c013e014e
016a0178018101820198019b01a301b601b801bc01c301cd01d001d101d2
01d801e101e201ea01ee01f002030219021f0223022b025f0268027f027f
028602930299029a02ca02cf02cf02d002d602e802ed03100322032f0338
0338033c03410342038a03ab03d0041504170442044f0475047a049d04a6
04c004c104d104e30500051005130524052c054b058b05c005c705f005fc
060e06180626066e0683068406a506b807040716073607820789079b07a1
07d40814082308a008bb011b01280119011a000000000000000000000000
015801c600af034c015901870154010d018a01590014022b00a10471024a
049c028f022a02ab00000000063904b00000000003a9008e0301020f0490
0391019400b50101003b0084013e00770192008c00c6017000db002c009a
03bf03fe02460100030001a4013800f603cf0000ffd501c3013401310147
004a02c804ce05c75c870224025e01d9045e060904c6009302bb04600435
040101b6017901000088038d003600ee037303e400cc016d049000be017c
0104003d023b00f4010400d6010c01100125022e003f0149031901500366
011a011b0179010000d5006e006902b1023f00c40194026b0328017b0132
00f500fe00b305c30099055204d5ff4e04b5ff2000fe007a0000000000aa
022e00b00000018c03600429ff57fef70187031802c10326023d01f20461
0269feae014f013402e503310173027401fb01b3012800a600ca024d0241
011a02a4000d00f500ec00dc00fc00f100b20493038dffde03abfe5102bc
0024055c00d200f00106005102ba01f300d300aa00be027f020800d801ad
043600b5036e00f0036002b802fd01f702f7009e00ae016400af022701db
024000ed065f04e001e56f0e011e0366006d000200a50006006203ee0041
ffe1001f0174ffcfffbf011b024f02ba008900f105c3026f0092007b00be
0099007e0098006100f3006c000c01790005000e000e00b300a100f20053
0017000300050007006e0077009a004a00ba007300d5005d00e800a100dc
00f6007f009900db02010050069c010600f000c200f500fa010800b90032
00af010e003800e4fff604d2000000b40089030100c30713063e048600bd
05bf073e404254403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a
292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b0042651582320b0
0d44235921212d2c20204518684420b001602045b04676688a4560442d2c
01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e
01b0172370b10217453ab10200080d2d2c45b01a234445b01923442d2c20
45b00325456164b050515845441b2121592d2cb00143632362b0002342b0
0f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b011
2bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243588745b011
2bb0172344b0177ae41b038a45186920b01723448a8a8720b0c05158b011
2bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b0
40618c482d2c01182f2d2c20b0032545b019234445b01a23444565234520
b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9
ffe0001a45208a54582321b03f1b235961441cb114008a5279b319402019
45208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323
430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f43234365
0b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b0032523
49b04060b0206320b000525823b002253823b002256538008a63381b2121
21212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a
2a2d2c352d2c76b8025623701020b802564520b0005058b00161593a2f18
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b008
26b00826b00826b008260f10161345683ab001162d2cb4000100000015b0
0826b00826b00826b008260f1016134568653ab001162d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2c4b5458381b2121592d2c014b53234b515ab00225
b00425b006254923451869525a58b00225b00225b0052546234569604859
2121212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b01243
5c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164b0
035158b00425b00425012046b01060482046b0106048590a21211b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b8fff060482046b8fff06048590a21211b2121592d2c4b5323
4b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b
53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b545a
8a8a0ab012435c5a58381b2121592d2c462346608a8a462320468a608a61
b8ff8062232010238ab9034303438a70456020b0005058b00161b8ffba8b
1bb0468c59b0106068013a2d2cb1020042b123018851b1400188535a58b9
10000020885458b202010243604259b12401885158b920000040885458b2
02020243604259b12401885458b2022002436042004b014b5258b2020802
436042591bb940000080885458b202040243604259b94000008063b80100
885458b202080243604259b94000010063b80200885458b2021002436042
595959592d00000100000002e667d2ff28745f0f3cf50819080000000000
a351bf3600000000b5c9a691fb86fcfd0941080100030009000100010000
000000010000073efe4e0043092bfb86fd65094100210007000000000000
00000000000003bc0600010000000000023900000239000002aa007e03cb
012f047300620473005a071d00ba05c700aa01e7013602aa008702aaff60
031d00c904ac00a50239001502aa004f0239005a0239ffa7047300840473
00f30473007c047300680473003804730082047300a6047300d404730087
0473008202aa009002aa005304ac00af04ac00a504ac00af04e300fc07cd
008505c7ffe905c7005205c700c205c700590556005404e30050063900b5
05c70059023900470473003b05c7005104e3005c06aa005305c7005c0639
00b305560053063900b305c7005a0556007e04e300f605c700bb055600e8
078d00f00556ffc2055600eb04e3003302aa0014023900a002aaff8e04ac
00d70473ffed02aa01120473005c04e3004a0473007b04e3007904730077
02aa006e04e3004004e30056023900520239ff200473004d02390050071d
004904e3005604e3007c04e3fff504e3007a031d00420473002d02aa009a
04e3009004730099063900930473ffd30473000d04000022031d0056023d
00b0031dff5204ac008905c7ffed05c7ffe905c700c20556005405c7005c
063900b305c700bb0473005c0473005c0473005c0473005c047300440473
005c0473007a047300770473007704730077047300770239005202390052
023900520239005204e3005604e3007c04e3007c04e3007c04e3007c04e3
007c04e3009004e3009004e3009004e30090047300ad033300e104730078
0473002a0473002c02cd00a60473005a04e3004805e5005905e500590800
012802aa017802aa00ad046400a50800ffbe0639009f05b400e804640082
046400820464008204730031049cffb403f4006805b400ca069600a10464
00000231000002f600a802ec009406250087071d003f04e3006c04e30037
02aa001804ac00a5046400540473ffec0464006f04e50056047300a80473
002e080000be05c7ffe905c7ffe9063900b30800008d078d00770473fffc
080000000400010004000107023900df023900fd0464008203f400890473
000d055600eb0156fe030473003702aa007a02aa001404e3007704e30074
0473fffe0239009302390015040000070800008b05c7fff20556005405c7
ffe9055600540556005402390047023900470239004702390047063900b3
063900b3063900b305c700bb05c700bb05c700bb0239005202aa007302aa
00be02aa00ae02aa00ad02aa014e02aa013402aa000e02aa004402aa007f
02aa00e004e3001e0239003d0556007e0473002d04e3003304000022023d
00b005c7004b04e3007c055600eb0473000d0556005304e3ffed04ac00a5
04ac00bd02aa00eb02aa00a802aa009c06ac00ae06ac00cc06ac009b0473
fff0063900b504e30040023900470556007e0473002d05c700c20473007b
05c700c20473007b04e30079046b008c02aa021005c7ffe90473005c05c7
ffe90473005c05c7005905eb007905c7004b055600540473007705560054
0473007704e3005c0239005004e3005c032b004d04e3005903d5004c05c7
005c04e3005605c7005c04e30056063900b304e3007c05c7005a031d0042
05c7005a031d00420556007e0473002d04e300f602aa008804e300f603d5
009d05c700bb04e3009005c700bb04e3009004e300330400002204e30033
0400002204e10059063900b3069400b504f6007c04e2007e03d40058054f
007c034500a105a1007c046bffed04d5007e032b007908d500140800004f
040000990800004f040000990800004f040000980400009807d5016a05c7
00d504ab00a504d5009d04ac00a504d5022204d5010505abffe9050001c9
05ab027e05abffe905ab027e05abffe905ab027e05abffe905abffe905ab
ffe905abffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe9
05abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe905ab
ffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905ab02d605ab006605abffea
05d5ffff04d500920800000007eb013007eb012007eb013007eb012004d5
00b204d5008004d5002a082b0198086b01b807550010060000f40600006f
0440003a0540003704c0003f041500400400002506000055064200470473
005f05ab005301eb013603d5012f0715008d0421006104d5009202d6005c
02d6005c04d500b202d6007005c7ffe90473005c05c700c20473007b05c7
00c20473007b055600540473007705560054047300770556005404730077
063900b504e30040063900b504e30040063900b504e3004005c7005904e3
005605c7005904e300560239004702390052023900470239005202390047
023900520239000f0239001a0473003b0239ff2005c700510473004d0473
005204e3005c0239ff8b05c7005c04e3005605c9006304e30052063900b3
04e3007c063900b304e3007c05c7005a031dffd70556007e0473002d04e3
00cd02aa002c05c700bb04e3009005c700bb04e3009005c700bb04e30090
05c700bb04e30090078d00f006390093055600eb0473000d0239005005c7
ffe90473005c0800ffbe071d003f0639009f04e3006c02aa0134078d00f0
06390093078d00f006390093078d00f006390093055600eb0473000d0239
013302aa00970473002a04cd005a06ac00ae06ac009d06ac00aa06ac0072
02aa001d02aaffc302aa017802aaffeb05c7ffed06d50073073f007303c9
007306c100670771008406c700670239ffdf05c7ffe905c70052055fffb1
0556005404e3003305c700590239004705c700510556ffb106aa005305c7
005c05420017063900b305be005b0556005304b9002704e300f6055600eb
0556ffc206a100e8063f001202390047055600eb04f6007c03d4005804e3
00540239005204bb009704f7fff40473009e03ef006b04e3005404760095
02390052048700540473ffe604d3fff8047300990399007004e3007c04d8
ffe30442007f04bb0097049fff5d062f009906ad00830239005204bb0097
04e3007c04bb009706ad0083055600540716010804e9005b05c000b30556
007e02390047023900470473003b08c1ffd40856005906d400f604fa0059
056b009c05c1005905c7ffe905aa005c05c7005204e9005b05c7ff660556
0054076bffe20524004c05c1005905c1005904eb0059057fffda06aa0053
05c70059063900b305c100590556005305c700c204e300f6056b009c063f
00ad0556ffc205d5005205aa010907d5005907e9005906d500d808000052
05aa005205c000960856005905d5ffd60473005c04f4008404d500820445
004204f2007a0473007705e4ffcc0415001c04e3009004e30090040e004b
04faffce05eb005004d5004804e3007c04e3004f04e3fff50473007b071d
00490473000d071400820473ffd3052b008804aa00cb071d0090077b0090
05a8008b06d5005204c00047046a004b06eb005204b6ffd80473007704e3
005603c10048048100830473002d02390052023900520239ff2007c1ffce
073f005204e30056040e004b0473000d04e30090049a005903bc00380800
004c092b005905b200a102aa008b02aaffdf02aaffee02aaffee02aa00c2
02aa004002aa003f02aa004902aa004902aa020c02aaffd102aa017a02aa
009f0393012f02aa01960265009c02aa040d02aa000c02aa00c904a9005b
049b004e03a7000a046600e004ea008e022f0087034e010804ed00870503
00e0022f00eb042c00ea03ed004e03f800ef04e30087050a0068022f0030
0316005a04e800af0459000b04c000d604b2006f03ff00ec041800470495
002b042c00eb05b800e105630033045e0030045e00eb045e00eb023600d8
040900d8068b0087022f0087042c00ea042c00c203f8002103f800210479
003205b800e105b800e105b800e105b800e104a9005b04a9005b04a9005b
049b004e03a2000a046600e004ea008e0295007803810070050300e00295
0090042c00ea03ed004e03f800ef050a00680316005a04e800af04c000e2
04b2006f041800470495002b042c00eb05b800e105630033022f0087049b
004e03ed004e04b2006f04db008d0000ffdc0000ff250000ffdc0000fe51
0000ffdc0000fe510000ff160000ff160000ff160000ff160000ff160000
ff160000ff160000ff160000ff160000ffdc0000ff160000ffdc0000ff20
0000ffdc047300870800000006b300b3055f007c067800bb05b600900000
fef30000fcdc0000fd8d0000ff640000fd9d0000fe5c0000ff3b0000ff32
0000fe220000fd710000fe910000fcd70000fd6b0000ffce0000ffc40000
fe42041b004106ac00ae06ac00a80000fefe0000fdd80000feaa0000fd6d
0000ff110000fdce0000fcb70000fbef0000fbef0000fd2b0000fc410000
fc230000fc670000fc030000fb8b0000fc380000fb8b0000fee60000ff49
0000fe480000fc030000fcb20000fdbf0000fdca0000fdca0000fd160000
fcb20000fc440000fc4e0000fb860000fd450000fd3d0000fc730000fc6b
0239005205c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7
ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c
05c7ffe90473005c05c7ffe90473005c05c7ffe90473005c05c7ffe90473
005c05c7ffe90473005c0556005404730077055600540473007705560054
047300770556005404730077055600540473007705560054047300770556
005404730077055600540473007702390047023900520239fffa0239fffa
063900b304e3007c063900b304e3007c063900b304e3007c063900b304e3
007c063900b304e3007c063900b304e3007c063900b304e3007c06b300b3
055f007c06b300b3055f007c06b300b3055f007c06b300b3055f007c06b3
00b3055f007c05c700bb04e3009005c700bb04e30090067800bb05b60090
067800bb05b60090067800bb05b60090067800bb05b60090067800bb05b6
0090055600eb0473000d055600eb0473000d055600eb0473000d05c7ffe9
0473005c0239004702390052063900b304e3007c05c700bb04e3009005c7
00bb04e3009005c700bb04e3009005c700bb04e3009005c700bb04e30090
0000003f0000003f0000003f0000003f04e9003903c10024076bffe205e4
ffcc04eb0059040e004b04eb0059040e004b05c7005904d50048047300e0
047300ae047300740473000b0556ffc20473ffd305aa010904aa00cb05aa
006d04aa005c05fb00b304730065063900b304e3007c0000000000000066
000000660000006600000066000001500000019800000392000005b60000
07640000094a000009cc00000a5a00000aec00000c6000000d1c00000dac
00000dfc00000e3e00000ea600000f6200001028000011dc000013520000
150600001674000017e4000018dc00001a3400001b8000001c0000001cbc
00001d5400001e0000001e9e00001fd4000021ea0000233c000024ba0000
25d0000026d2000027f0000028d400002a9c00002bb600002ca400002da0
00002f6c0000302c000032cc0000352c0000360c000037140000387a0000
3a2800003c2400003d6600003ec000003fb2000041a40000436e00004520
000046820000476a000047b6000048a40000494000004976000049c00000
4c0000004d3e00004e5200004f84000051c60000537e00005566000056ec
00005820000059d600005c0800005ca000005f32000060f6000062040000
636600006518000066360000687200006a9400006c3a00006d7a00006f8e
000072060000743200007574000077160000777000007912000079c80000
7a1000007a6600007a9e00007ad000007b0600007b4600007b8c00007bc6
00007bfe00007c3800007c8200007cba00007cf600007d2800007d580000
7d9000007dd000007e0e00007e5600007e8e00007ec200007ef800007f28
00007f5800007f8800007fc000007ff2000080280000806c000080a20000
80d40000811a000082120000829c00008446000085c00000875e000087ca
00008896000089f000008bd600008d5e00008e8200008ed800008f800000
90fa000092ac0000941c00009562000096780000977200009850000099da
00009b3200009c2400009d0800009d6800009e5400009f100000a0440000
a0c40000a20a0000a4580000a6580000a77a0000a87a0000a8fc0000a9a2
0000aac40000ac300000acb60000ad720000ae400000aee60000af240000
af680000afa20000b15c0000b3020000b33c0000b3740000b43e0000b534
0000b5b40000b6400000b73e0000b8440000b8820000b8ba0000b9100000
ba1c0000ba6c0000babc0000bd2e0000bf080000c05a0000c08c0000c10e
0000c1f60000c4660000c4ac0000c4e20000c51a0000c54e0000c5840000
c5be0000c6080000c6580000c6920000c6c60000c7000000c7340000c778
0000c7c00000c8160000c8a40000c92c0000c9e40000ca2a0000cac00000
cb100000cbe20000cc8a0000cd1a0000cd900000cdfa0000cf080000cffa
0000d02e0000d0640000d0a20000d0ee0000d17c0000d2a60000d4440000
d4760000d4a80000d5a40000d6c60000d7300000d8860000d92c0000da74
0000dbd20000dde20000dfda0000e2580000e3600000e3980000e3d80000
e41a0000e45a0000e49a0000e4ca0000e4fa0000e5320000e5700000e704
0000e7380000e77c0000e7b80000e7fc0000e8280000e8560000e88c0000
ea000000ea100000ea3e0000ea6c0000ea9e0000ead20000eb040000eb34
0000ec540000ed2e0000ed6a0000edba0000edfe0000ee360000ee8a0000
eec80000eefa0000ef300000ef680000ef980000efd00000f0080000f038
0000f0700000f1b40000f3b60000f3f60000f5c60000f6020000f6400000
f6880000f6ba0000f6f00000f7280000f7620000f79e0000f84a0000f960
0000fad80000fbf60000fd760000feb60000ff9e000100b2000102540001
02b2000102e000010402000107060001074600010786000107c600010804
00010862000108c00001092e0001094e00010a0a00010ae000010b160001
0b8400010bce00010c1800010c3400010c5000010c7000010c9000010cb0
00010cd000010cf600010d1c00010d4200010d6800010d9800010dc00001
0de800010e1400010e4000010e7400010e9e00010eca00010f0000010f2a
00010f5600010f8c00010fb600010fe00001101400011044000110780001
10bc000110ec000111200001116200011196000111c80001120a0001123e
0001126e000112b0000112f40001133a00011396000113b2000113ce0001
13ea0001140600011422000115900001186000011ad000011aec00011b06
00011b2200011b3e00011b5a00011b7600011bd000011c0a00011c740001
1d3e00011dde00011eb400011f3400011fbc0001202a000120c000012118
00012158000121b6000122180001225c000122e800012330000123400001
238c000125400001266e00012698000126b4000126e00001271800012764
00012794000127c8000128020001284000012870000128a0000128d00001
29060001293a0001297e000129ae000129e200012a1a00012a5200012a82
00012ab200012ae200012d2600012d5600012d8a00012f720001319a0001
31da0001320c0001324000013276000132ae000132dc0001330000013324
00013360000134ee0001351800013568000136b4000136da000137020001
37280001374e0001386200013a2800013a5800013a8c00013ac200013af2
00013b1800013b4a00013b8800013bd000013d9400013fb000013fe00001
40100001404000014070000140a8000140de000141040001413a0001416a
0001419a000141ca000141fa000142a0000142e800014316000143460001
4376000143aa000143e0000144180001444800014478000144a8000144d8
0001450c0001454000014574000145ac0001463e000146a2000148c80001
498a00014b4800014db800015026000151fa00015274000152ee0001533c
000153ee0001553e000156bc000158360001591000015a0800015b8c0001
5cfe00015d3600015d4600015d5600015e5a00015e6a00015e7a00015e8a
00015e9a00015eaa00015fa800015fb800015fc8000160ce000160de0001
61c4000161d40001633c0001634c0001635c0001636c0001651200016626
0001665a0001668e000166be000166ec0001671c00016750000167860001
68e000016a1400016b5600016cb800016dae00016dbe00016efc00016fe6
0001715200017162000172d6000172e60001743800017568000176c20001
783400017a0e00017b6e00017ba000017bda00017c0a00017c3a00017c6e
00017ca200017e3200017e6200017f7600017f8600017f9600017fca0001
7fda00018174000182dc0001846400018494000184c80001861400018624
0001874e0001875e000187f8000189ac000189bc00018c3800018d720001
8efe00018f2e00019092000191cc000191dc000191ec000191fc000192ec
000192fc0001930c0001931c00019470000195f800019608000197300001
9880000199f400019b9200019cb000019de400019f000001a00c0001a140
0001a2e20001a2f20001a4220001a5200001a63c0001a75a0001a76a0001
a9b60001ab040001ab140001ab4c0001aca80001adca0001af940001b0e4
0001b0f40001b1c20001b1d20001b1e20001b1f20001b2020001b3c40001
b3d40001b58e0001b6a80001b88e0001bac20001bbec0001bd4e0001be32
0001bf300001c0760001c1ec0001c2260001c4640001c51a0001c6200001
c6300001c6400001c6720001c6820001c81e0001c9860001cb720001cba2
0001cbe20001cdbe0001ceae0001cf940001cfce0001d1d40001d30c0001
d3580001d4020001d45a0001d4be0001d4ea0001d5340001d59e0001d5ba
0001d5e00001d60e0001d6740001d6a20001d6bc0001d6d80001d6f40001
d7120001d7420001d7700001d7a00001d7fe0001d84a0001d8a20001d8cc
0001d9220001d9400001d98a0001d9d60001da580001da760001dab80001
db120001db680001dbb80001dc1c0001dc3c0001dc820001dcfa0001dd4e
0001ddc00001de460001de860001ded20001df320001df700001dff40001
e0680001e09a0001e0ca0001e0f80001e1160001e1460001e1ae0001e1ee
0001e2700001e2cc0001e3440001e3dc0001e41e0001e4c40001e56a0001
e62e0001e6f20001e7600001e7d80001e8560001e8c20001e93a0001e984
0001e9fa0001ea380001eaa40001eb460001eb840001ebe60001ec620001
ecd80001ed5e0001edc40001ee5c0001eef20001ef960001f0020001f082
0001f0e00001f1820001f2160001f2540001f2b00001f2c60001f35c0001
f3c40001f3ea0001f4880001f4e80001f5460001f5760001f5a60001f5f6
0001f6460001f6860001f6f80001f74c0001f7aa0001f8000001f8360001
f8780001f8be0001f9080001f9380001f9700001f9a00001fb080001fe4e
0001ff6e000200540002019a000202fa00020358000203b60002043e0002
04aa000205160002059e0002068000020754000208380002090e000209b0
00020a6000020b0c00020b9400020c0400020c3c00020da000020f5a0002
1158000211c600021236000212a400021312000213d00002148e00021530
000215dc0002168800021726000217c40002186200021874000218860002
1898000218aa000218bc00021944000219cc00021a6a00021a7c00021a8e
00021aa000021ab000021ac000021ad200021ae400021af600021b080002
1b1a00021bca00021c7600021d2600021dd200021e2c00021e5200021e7a
00021ebe00021ef200021f5400021fa8000220000002206c000220c00002
212200022170000221c20002221200022260000222ce00022358000223b8
000224300002247c000224ec000225300002259e000225e40002263c0002
2662000226a0000226de0002270a0002273a0002276a000227c600022820
00022872000228e4000229320002299e000229e600022a4200022a8c0002
2af400022b2a00022b6000022b8800022bb000022bdc00022c1000022c3e
00022c6600022cc400022d1600022d6a00022dd400022e2600022e8c0002
2ed600022f2a00022f7c00022fd000023002000230320002306200023092
000230be000230e6000231180002314a00023176000231aa000231d80002
32020002323a00023278000232b6000232f20002333e0002337c000233b2
000233e40002341400023448000234760002349c000234c4000234ea0002
35260002355a0002358a000235ba000235ea0002361a0002364e00023682
000236b2000236e2000237120002374200023776000237e60002381a0002
388c000238c00002393000023964000239da00023a9a00023b9c00023cd6
00023dbc00023e5400023eec000240fe0002430a00024476000245c00002
47a20002494a00024a2600024b0000024baa00024c4800024d2600024dfa
00024f3000025046000251520002526a0002534200025406000254d20002
55b0000256840002574c0001000003bc0100003f0057000500020010002f
0055000004de0c36000300020000005f047a000000030000000000fe0000
0000000300000001000a013e0000000300000002001605de000000030000
0003006605c00000000300000004002205d2000000030000000500180626
00000003000000060024063e000000030000000700c40662000000030000
0008002607b20000000300000009008a0dda000000030000000a04c200fe
000000030000000b00620e64000000030000000c00660ec6000000030000
000d06b40726000000030000000e005c0f2c0001000000000000007f0f88
0001000000000001000510270001000000000002000b1277000100000000
0003003312680001000000000004001112710001000000000005000c129b
0001000000000006001212a70001000000000007006212b9000100000000
000800131361000100000000000900451675000100000000000a02611007
000100000000000b003116ba000100000000000c003316eb000100000000
000d035a131b000100000000000e002e171e0003000104030002001e1758
0003000104030004002a174c0003000104050002001a1782000300010405
0004002617760003000104060002001417a800030001040600040020179c
0003000104070002001617c80003000104070004002217bc000300010408
0002001a17ea0003000104080004002617de000300010409000000fe0000
0003000104090001000a013e0003000104090002001605de000300010409
0003006605c00003000104090004002205d2000300010409000500180626
00030001040900060024063e000300010409000700c40662000300010409
0008002607b20003000104090009008a0dda000300010409000a04c200fe
000300010409000b00620e64000300010409000c00660ec6000300010409
000d06b40726000300010409000e005c0f2c00030001040a0002001e1810
00030001040a0004002a180400030001040b00020024183a00030001040b
00040030182e00030001040c0002001a186a00030001040c00040026185e
00030001040e0002001a189000030001040e000400261884000300010410
0002002218b60003000104100004002e18aa0003000104130002001618e4
0003000104130004002218d80003000104140002001c1906000300010414
0004002818fa00030001041500020024192e000300010415000400301922
0003000104160002001e195e0003000104160004002a1952000300010419
0002002219880003000104190004002e197c00030001041b0002001a19b6
00030001041b0004002619aa00030001041d0002001419dc00030001041d
0004002019d000030001041f0002001819fc00030001041f0004002419f0
0003000104240002001c1a20000300010424000400281a1400030001042a
000200181a4800030001042a000400241a3c00030001042d000200161a6c
00030001042d000400221a6000030001080a0002001e181000030001080a
0004002a18040003000108160002001e195e0003000108160004002a1952
000300010c0a0002001e1810000300010c0a0004002a1804000300010c0c
0002001a186a000300010c0c00040026185e005400790070006500660061
00630065002000a900200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e0020
0070006c0063002e00200044006100740061002000a90020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e00200070006c0063002f0054007900700065
00200053006f006c007500740069006f006e007300200049006e0063002e
00200031003900390030002d0031003900390032002e00200041006c006c
002000520069006700680074007300200052006500730065007200760065
00640043006f006e00740065006d0070006f007200610072007900200073
0061006e0073002000730065007200690066002000640065007300690067
006e002c00200041007200690061006c00200063006f006e007400610069
006e00730020006d006f00720065002000680075006d0061006e00690073
007400200063006800610072006100630074006500720069007300740069
006300730020007400680061006e0020006d0061006e00790020006f0066
00200069007400730020007000720065006400650063006500730073006f
0072007300200061006e0064002000610073002000730075006300680020
006900730020006d006f0072006500200069006e002000740075006e0065
0020007700690074006800200074006800650020006d006f006f00640020
006f006600200074006800650020006c0061007300740020006400650063
00610064006500730020006f006600200074006800650020007400770065
006e00740069006500740068002000630065006e0074007500720079002e
002000200054006800650020006f0076006500720061006c006c00200074
0072006500610074006d0065006e00740020006f00660020006300750072
00760065007300200069007300200073006f006600740065007200200061
006e0064002000660075006c006c006500720020007400680061006e0020
0069006e0020006d006f0073007400200069006e00640075007300740072
00690061006c0020007300740079006c0065002000730061006e00730020
00730065007200690066002000660061006300650073002e002000200054
00650072006d0069006e0061006c0020007300740072006f006b00650073
002000610072006500200063007500740020006f006e0020007400680065
00200064006900610067006f006e0061006c002000770068006900630068
002000680065006c0070007300200074006f002000670069007600650020
00740068006500200066006100630065002000610020006c006500730073
0020006d0065006300680061006e006900630061006c0020006100700070
0065006100720061006e00630065002e002000200041007200690061006c
00200069007300200061006e002000650078007400720065006d0065006c
007900200076006500720073006100740069006c0065002000660061006d
0069006c00790020006f0066002000740079007000650066006100630065
0073002000770068006900630068002000630061006e0020006200650020
00750073006500640020007700690074006800200065007100750061006c
0020007300750063006300650073007300200066006f0072002000740065
00780074002000730065007400740069006e006700200069006e00200072
00650070006f007200740073002c002000700072006500730065006e0074
006100740069006f006e0073002c0020006d006100670061007a0069006e
006500730020006500740063002c00200061006e006400200066006f0072
00200064006900730070006c00610079002000750073006500200069006e
0020006e006500770073007000610070006500720073002c002000610064
0076006500720074006900730069006e006700200061006e006400200070
0072006f006d006f00740069006f006e0073002e004d006f006e006f0074
007900700065003a0041007200690061006c00200042006f006c00640020
004900740061006c00690063003a00760065007200730069006f006e0020
0032002e0039003000200028004d006900630072006f0073006f00660074
002900560065007200730069006f006e00200032002e0039003000410072
00690061006c002d0042006f006c0064004900740061006c00690063004d
00540041007200690061006c00ae002000540072006100640065006d0061
0072006b0020006f006600200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c006300200072006500670069007300740065007200650064
00200069006e002000740068006500200055005300200050006100740020
002600200054004d0020004f00660066002e00200061006e006400200065
006c0073006500770068006500720065002e004e004f0054004900460049
0043004100540049004f004e0020004f00460020004c004900430045004e
00530045002000410047005200450045004d0045004e0054000d000a000d
000a00540068006900730020007400790070006500660061006300650020
006900730020007400680065002000700072006f00700065007200740079
0020006f00660020004d006f006e006f0074007900700065002000540079
0070006f00670072006100700068007900200061006e0064002000690074
0073002000750073006500200062007900200079006f0075002000690073
00200063006f0076006500720065006400200075006e0064006500720020
0074006800650020007400650072006d00730020006f0066002000610020
006c006900630065006e00730065002000610067007200650065006d0065
006e0074002e00200059006f0075002000680061007600650020006f0062
007400610069006e00650064002000740068006900730020007400790070
0065006600610063006500200073006f0066007400770061007200650020
0065006900740068006500720020006400690072006500630074006c0079
002000660072006f006d0020004d006f006e006f00740079007000650020
006f007200200074006f0067006500740068006500720020007700690074
006800200073006f00660074007700610072006500200064006900730074
00720069006200750074006500640020006200790020006f006e00650020
006f00660020004d006f006e006f0074007900700065002700730020006c
006900630065006e0073006500650073002e000d000a000d000a00540068
0069007300200073006f0066007400770061007200650020006900730020
0061002000760061006c007500610062006c006500200061007300730065
00740020006f00660020004d006f006e006f0074007900700065002e0020
0055006e006c00650073007300200079006f007500200068006100760065
00200065006e0074006500720065006400200069006e0074006f00200061
0020007300700065006300690066006900630020006c006900630065006e
00730065002000610067007200650065006d0065006e0074002000670072
0061006e00740069006e006700200079006f007500200061006400640069
00740069006f006e0061006c0020007200690067006800740073002c0020
0079006f0075007200200075007300650020006f00660020007400680069
007300200073006f0066007400770061007200650020006900730020006c
0069006d006900740065006400200074006f00200079006f007500720020
0077006f0072006b00730074006100740069006f006e00200066006f0072
00200079006f007500720020006f0077006e0020007000750062006c0069
007300680069006e00670020007500730065002e00200059006f00750020
006d006100790020006e006f007400200063006f007000790020006f0072
002000640069007300740072006900620075007400650020007400680069
007300200073006f006600740077006100720065002e000d000a000d000a
0049006600200079006f00750020006800610076006500200061006e0079
0020007100750065007300740069006f006e00200063006f006e00630065
0072006e0069006e006700200079006f0075007200200072006900670068
0074007300200079006f0075002000730068006f0075006c006400200072
0065007600690065007700200074006800650020006c006900630065006e
00730065002000610067007200650065006d0065006e007400200079006f
007500200072006500630065006900760065006400200077006900740068
002000740068006500200073006f0066007400770061007200650020006f
007200200063006f006e00740061006300740020004d006f006e006f0074
00790070006500200066006f00720020006100200063006f007000790020
006f006600200074006800650020006c006900630065006e007300650020
00610067007200650065006d0065006e0074002e000d000a000d000a004d
006f006e006f0074007900700065002000630061006e0020006200650020
0063006f006e007400610063007400650064002000610074003a000d000a
000d000a0055005300410020002d00200028003800340037002900200037
00310038002d0030003400300030000900090055004b0020002d00200030
003100310034003400200030003100370033003700200037003600350039
00350039000d000a0068007400740070003a002f002f007700770077002e
006d006f006e006f0074007900700065002e0063006f006d004d006f006e
006f00740079007000650020005400790070006500200044007200610077
0069006e00670020004f006600660069006300650020002d00200052006f
00620069006e0020004e006900630068006f006c00610073002c00200050
00610074007200690063006900610020005300610075006e006400650072
0073002000310039003800320068007400740070003a002f002f00770077
0077002e006d006f006e006f0074007900700065002e0063006f006d002f
00680074006d006c002f006d0074006e0061006d0065002f006d0073005f
0061007200690061006c002e00680074006d006c0068007400740070003a
002f002f007700770077002e006d006f006e006f0074007900700065002e
0063006f006d002f00680074006d006c002f006d0074006e0061006d0065
002f006d0073005f00770065006c0063006f006d0065002e00680074006d
006c0068007400740070003a002f002f007700770077002e006d006f006e
006f0074007900700065002e0063006f006d002f00680074006d006c002f
0074007900700065002f006c006900630065006e00730065002e00680074
006d006c547970656661636520a920546865204d6f6e6f7479706520436f
72706f726174696f6e20706c632e204461746120a920546865204d6f6e6f
7479706520436f72706f726174696f6e20706c632f5479706520536f6c75
74696f6e7320496e632e20313939302d313939322e20416c6c2052696768
7473205265736572766564436f6e74656d706f726172792073616e732073
657269662064657369676e2c20417269616c20636f6e7461696e73206d6f
72652068756d616e69737420636861726163746572697374696373207468
616e206d616e79206f6620697473207072656465636573736f727320616e
642061732073756368206973206d6f726520696e2074756e652077697468
20746865206d6f6f64206f6620746865206c617374206465636164657320
6f6620746865207477656e74696574682063656e747572792e2020546865
206f766572616c6c2074726561746d656e74206f66206375727665732069
7320736f6674657220616e642066756c6c6572207468616e20696e206d6f
737420696e647573747269616c207374796c652073616e73207365726966
2066616365732e20205465726d696e616c207374726f6b65732061726520
637574206f6e2074686520646961676f6e616c2077686963682068656c70
7320746f20676976652074686520666163652061206c657373206d656368
616e6963616c20617070656172616e63652e2020417269616c2069732061
6e2065787472656d656c7920766572736174696c652066616d696c79206f
66207479706566616365732077686963682063616e206265207573656420
7769746820657175616c207375636365737320666f722074657874207365
7474696e6720696e207265706f7274732c2070726573656e746174696f6e
732c206d6167617a696e6573206574632c20616e6420666f722064697370
6c61792075736520696e206e6577737061706572732c2061647665727469
73696e6720616e642070726f6d6f74696f6e732e4d6f6e6f747970653a41
7269616c20426f6c64204974616c69633a76657273696f6e20322e393020
284d6963726f736f66742956657273696f6e20322e3930417269616c2d42
6f6c644974616c69634d54417269616ca82054726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e20706c6320
7265676973746572656420696e2074686520555320506174202620544d20
4f66662e20616e6420656c736577686572652e4e4f54494649434154494f
4e204f46204c4943454e53452041475245454d454e540d0a0d0a54686973
207479706566616365206973207468652070726f7065727479206f66204d
6f6e6f74797065205479706f67726170687920616e642069747320757365
20627920796f7520697320636f766572656420756e646572207468652074
65726d73206f662061206c6963656e73652061677265656d656e742e2059
6f752068617665206f627461696e65642074686973207479706566616365
20736f66747761726520656974686572206469726563746c792066726f6d
204d6f6e6f74797065206f7220746f676574686572207769746820736f66
7477617265206469737472696275746564206279206f6e65206f66204d6f
6e6f747970652773206c6963656e736565732e0d0a0d0a5468697320736f
66747761726520697320612076616c7561626c65206173736574206f6620
4d6f6e6f747970652e20556e6c65737320796f75206861766520656e7465
72656420696e746f2061207370656369666963206c6963656e7365206167
7265656d656e74206772616e74696e6720796f75206164646974696f6e61
6c207269676874732c20796f757220757365206f66207468697320736f66
7477617265206973206c696d6974656420746f20796f757220776f726b73
746174696f6e20666f7220796f7572206f776e207075626c697368696e67
207573652e20596f75206d6179206e6f7420636f7079206f722064697374
726962757465207468697320736f6674776172652e0d0a0d0a496620796f
75206861766520616e79207175657374696f6e20636f6e6365726e696e67
20796f75722072696768747320796f752073686f756c6420726576696577
20746865206c6963656e73652061677265656d656e7420796f7520726563
656976656420776974682074686520736f667477617265206f7220636f6e
74616374204d6f6e6f7479706520666f72206120636f7079206f66207468
65206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e6f7479
70652063616e20626520636f6e7461637465642061743a0d0a0d0a555341
202d202838343729203731382d303430300909554b202d20303131343420
3031373337203736353935390d0a687474703a2f2f7777772e6d6f6e6f74
7970652e636f6d4d6f6e6f7479706520547970652044726177696e67204f
6666696365202d20526f62696e204e6963686f6c61732c20506174726963
6961205361756e646572732031393832687474703a2f2f7777772e6d6f6e
6f747970652e636f6d2f68746d6c2f6d746e616d652f6d735f617269616c
2e68746d6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68
746d6c2f6d746e616d652f6d735f77656c636f6d652e68746d6c68747470
3a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f747970652f
6c6963656e73652e68746d6c0041007200690061006c0020004e00650067
007200650074006100200063007500720073006900760061004100720069
0061006c002000740075010d006e00e90020006b00750072007a00ed0076
00610041007200690061006c00200066006500640020006b007500720073
006900760041007200690061006c002000460065007400740020004b0075
00720073006900760041007200690061006c0020038803bd03c403bf03bd
03b1002003a003bb03ac03b303b903b10041007200690061006c0020004e
006500670072006900740061002000430075007200730069007600610041
007200690061006c0020004c0069006800610076006f0069007400750020
004b00750072007300690076006f00690041007200690061006c00200047
0072006100730020004900740061006c0069007100750065004100720069
0061006c0020004600e9006c006b00f6007600e90072002000640151006c
00740041007200690061006c002000470072006100730073006500740074
006f00200043006f0072007300690076006f0041007200690061006c0020
005600650074002000430075007200730069006500660041007200690061
006c002000480061006c00760066006500740020004b0075007200730069
00760041007200690061006c00200050006f00670072007500620069006f
006e00610020006b0075007200730079007700610041007200690061006c
0020004e00650067007200690074006f00200049007400e1006c00690063
006f0041007200690061006c0020041f043e043b0443043604380440043d
044b04390020041a044304400441043804320041007200690061006c0020
00540075010d006e00e10020006b00750072007a00ed0076006100410072
00690061006c00200046006500740020004b007500720073006900760041
007200690061006c0020004b0061006c0131006e0020013000740061006c
0069006b0041007200690061006c0020004b007200650070006b006f0020
0070006f016100650076006e006f0041007200690061006c0020006e0067
0068006900ea006e00670020011100e20323006d0041007200690061006c
0020004c006f00640069002000650074007a0061006e0061b15440b8034d
b32f333240b8034db23e3340b8034db345493240b8034db2503340b8034d
b25a3340b8034db2653380b8034db31b1b3240b8034db312143240b8034d
b30b0d320f4115034d007f034d00ef034d0003003f034d004f034d008f03
4d00ff034d0004000f034d007f034d0002034cb301221f60bd034b007f03
4b000200400349b34343327fbf0349009f034900df0349000300400349b3
30333240b80349b335353240b80349b32f313240b80349b327273240b803
49b32225320f410c0349003f0349007f034900cf034900df034900050040
0349b30913322f4121034a007f034a0002008f034a00bf034a00cf034a00
df034a00ef034a0005000f034a002f034a004f034a0060034a009f034a00
05000f034a00df034a00020040034ab3293a3240b8034ab312143240b803
4ab30b10325041100348007f0348009f03480003009f0348000100df0348
00ef0348000200400348b309103212b9ffc002dcb2404132b9ffc002dcb2
393c32b9ffc002deb33c4132d4411902de0001003002dc004002dc005002
dc006002dc00d002dc00e002dc00f002dc0007000002dc009002dc00a002
dc00b002dcb2043790412202cb0001009002c80001004002cb0001004002
c80001003002cb0001003002c80001002002cb0001002002c80001004002
a5000102a50076009002a400a002a4000202a440255fe006e00702bf06bf
0702af06af07029f069f07024f064f07020f060f0702af06af07020f415d
0342002f0342004f0342009f03420004000f0342003f0342005f034200af
034200c0034200ff03420006002f0236007f02360002000f0236001f0236
002f0236003f0236004f0236008f0236009f023600bf0236000800af0236
0001000f0236002f0236003f0236005f0236007f023600ff023600060010
0235007f02350002000f0235002f023500d002350003007f023500010010
0235003f0235004f02350003034a034a0342034202370237023602360235
0235ffc002ccb2213432b9ffc002cbb2213432b9ffc002cab2213432b9ff
c002c9b2213432b9ffc002c8b2213432b8ffc0b36d1a3c32b8ffc0b3e91a
3532b9ffc0015bb21a3532b8ffc0b37c1a3532b8ffc0b3761a3532b8ffc0
b3601a3532b8ffc0b32e1a3532b8ffc0b22a3433b8ffc0b22a3333b8ffc0
b22a3233b8ffc0b22a3133b8ffc0b22a3033b8ffc0b22a2f33b8ffc0b22a
2a33b8ffc0b22a2933b8ffc0b22a2833b8ffc0b22a2133b8ffc0b22a1733
b8ffc0b22a1633b8ffc0b22a1533b8ffc0b22a1433b8ffc0b22a1333b8ff
c0b22a1233b8ffc0b22a0d33b8ffc0b22a0c33b8ffc0b22a0b33b8ffc0b3
2a1a3532b8ffc0b2273433b8ffc0b2273333b8ffc0b2273233b8ffc0b227
3133b8ffc0b2273033b8ffc0b2272f33b8ffc0b2272a33b8ffc0b2272933
b8ffc0b2272833b8ffc0b2272133b8ffc0b2271733b8ffc0b2271633b8ff
c0b2271533b8ffc0b2271433b8ffc0b2271333b8ffc0b2271233b8ffc0b2
270d33b8ffc0b2270c33b8ffc0b2270b33b8ffc0b3271a3532b8ffc0b321
1a3532b802ccb224351fb802cbb224351fb802cab224351fb802c9b22435
1fb802c8400b24351f6d243c1fe924351fb8015b401f24351f7c24351f76
24351f6024351f2e24351f2a24351f2724351f2124351fb8033fb28e291f
b8033eb320231f5f4109033d006f033d007f033d008f033d00040339b320
211f1f41150338002f0338003f0338004f03380004009f033800af033800
bf03380003002f0338003f033800020335b624351f8f3f3c1fb80119b624
3c1ff724351fb801b3b224351fb801abb224351fb80156b224351fb80155
b224351fb8011b404e24351ffa24351fea24351fd224351f7724351f6e24
351f5724351f4c24351f4324351f3d24351f3524351f37010012e001f001
021270018001900103010100090102000800171700000012110840bb0216
000000090289b269131fb801b5b228671f411501b400280401001f01b301
5f0401001f01b000690401001f01ab00270125001f01aa00270156001f01
a2b22a9e1fb8019fb22a321fb8019db22a291fb80165b2281d1fb80164b2
28201fb80163b228301fb80161b228411fb8015bb2279e1f410901570027
0801001f0156002a019a001f0155b22a891fb80154b22a891fb80153b22a
431fb8011fb228201fb8011eb228931f410b011d006902ab001f011b0027
02ab001f0119002a02abb21ffa27b80401b21ff927b802abb61ff72a4f1f
ea2ab80801b61fe92a791fd528b80201400f1fd42ecd1fd221cd1fc3282f
1fc269b802ab400b1fc069cd1fbe2a4f1fb124b80401b21f9a2ab8015640
0b1f992a381f912a351f7c2eb80401400b1f772ecd1f762aab1f7028b802
abb21f6f1fb80401b21f6e21b8019a400b1f6d27931f652a811f6027b801
9ab61f5f2a2a1f572eb80125b21f5269b80201b21f4c2eb80156b61f4b21
cd1f4969b802ab400b1f472a2b1f4469cd1f432ab80801b21f4128b80401
b21f4027b80101401b1f3d21e41f3b2a381f372ebb1f352a3b1f312ee41f
232a451f2269b80156b71f550d090d093790b8012340360790dd07907207
905507903407902f07902b07902607902507901e07901d07140812081008
0e080c080a080808060804080208000814b8ffe0402c0000010014061000
000100060400000100041000000100100200000100020000000100000201
0802004a0012b013034b024b5342b0382b4bb807ff52b0372b4bb008505b
58b101018e59b0382b4bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b544218b00288b801005458b80119b101018e851bb0124358
b900010119858d1bb900010119858d59594358ba009f0216000173590016
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
2b4b5079b9001f01a8b3071f36072b2b4b5379b9009001a8b3079036072b
2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb08953205c58b902
1802164544b90217021645445958b904b30218455258b9021804b3445959
4bb8019a53205c58b9002002184544b90024021845445958b90e08002045
5258b900200e084459594bb802ab53205c58b9001f02174544b900280217
45445958b918a5001f455258b9001f18a54459594bb8040153205c58b169
204544b1202045445958b923000069455258b9006923004459594bb80401
53205c58b9015f00244544b1242445445958b923a0015f455258b9015f23
a04459594bb02b53205c58b127274544b12e2745445958b9011c00274552
58b90027011c4459594bb03553205c58b127274544b1212745445958b901
5f0027455258b90027015f4459594bb08c53205c58b127274544b12a2745
445958b903aa0027455258b9002703aa4459592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b654245
695342014b5058b108004259435c58b1080042591610703eb0124358b90d
193ea51bba00d203eb000b2b59b00a2342b00b2342003f3f182b103c012f
5d435c58b27f01015d595d435c58b2ef01015d59060cb0062342b0072342
b0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b01243
58b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b918
7e3b211bba01a80400000b2b59b0102342b0112342002b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b7373742b732b2b2b2b2b2b2b2b2b2b2b2b00
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0018
456944456944456944184569441845694473737475737374757374737474
74747473454473454474004bb02a534bb038515a58b1070745b040604459
004bb02e534bb038515a58b1030345b0406044b1090945b0406144597373
7373737373732b7475742b2b2b435c584031402a3433402a3333402a3233
402a3133402a3033402a2f33402734334027333340273233402731334027
303340272f33a0410a02cb000100a002c80001009f02cb0001009f02c840
3301402a2a33402a293340272a3340272933402a123340271233402a2833
40272833402a2133402a1d353240271d353240272133002b2b2b2b2b2b2b
2b2b2b2b2b737373732b2b2b2b2b2b2b2b2b2b2b2b59002b7374752b2b2b
737474752b732b2b2b2b2b752b0173002b7374752b2b2b2b2b2b2b2b2b2b
000000>
[16065 16145 15597 16037 15817 15937 15981 16369 16313 9169 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 9402 38 <000100c2ffe605f705d3001b00b2402e4f004f01400e400f04071717172b
092b0a2b1448054f0f47144a1859025a035a0c96090d0100190e4f0f5f0f
020fba01ad001202cb400a0b032f003f0040000300ba01ad001902cb403a
040900286f01bf01024f015f019f010301810f28000e100e020ecb401d01
e01d01201d401d501d601d041d162840075007600703000710070207b802
9ab31c3932182b10f65d71ed10715d72f45dedf45d5ded003ffde45d3ffd
f45d391112393130015d005d010506002320001134122433320417052626
23220602151416333236047a013059fe9ceffef3fed1cb0168d4ee01261a
fedf1889727dd982a97e75c302102ef7fefb01440134fa019fdcffdc1c80
7398febda1b0c098>Arial-BoldItalicMT AddT42Char 
1 9680 39 <00020059000005cc05ba0011001f009b4022851801370035124b17571257
1fba15b917ca15ca16091f12121f0001140000011312b802c8b41100081e
1fb802c8401a0201020100101928000a100a020a1a402101202101bf2101
211fbc029200120224000102444011c000d0000230004000500003003c20
0017b802aab132182b2b10f65d71e4fde44e105d7172f65d4ded2b103c00
3f3cfd3c3f3cfd3c87052e2b7d10c43130015d005d33012132171e041514
0207060706232733323637361235342627262323590133018ba52e5b8f75
552eb58969a65ec3a699a6953e597a654a3485af05ba050938658eb96eed
fe916c542816ec293851010eb79c9d1a1200>Arial-BoldItalicMT AddT42Char 
1 12140 47 <0001005c000004a705ba0005009e402e2007012500250320042005360036
033d0440055603530450056f0470047005a7030f0203031f000114000001
0403b802c8400a05000802010201001005b8024240140004100460049f04
cf04df0406041a5007010702bc015d0003022400010244400c3000400050
0003003c060017ba02aa025700182b2b10f65de4fde44e105df65d4de42b
103c003f3c3f3cfd3c87052e2b7d10c43130015d01713301210321075c01
33012dff02ea3305bafb3bf5>Arial-BoldItalicMT AddT42Char 
1 12332 48 <000100530000070705ba000c025fb10602435458b6000701010b030bb802
81b30a060203b80281401105040a040e0d0c20090d340220090d3407b8ff
d04010091934020c070305040805020b010408003f3c3c3f3c111217392b
2b2b01111239392f33fd33332fed1112392f333331301b40e20e06090709
0845004503460a6e08760685008a018406f0090c300e400ed00e030f0709
0c27022c0c4a07460c7f079007bf0c0919091a0c1f0e26002a092c0c200e
07030b030ce600ea08e80cf00e0606000b010f02080509070608030a07c5
00cf08c70ac60bc80c05970a9b0cb400bb08b509b70c06880a8c0c9d069f
079f089909067b097c0c8f068d078f08890906680c600e79007f067f077b
08064908470c5809580c6f066c07063909380c4f064c07040c0266080707
21000c1400000c090a0a220b0c140b0b0c05040422030214030302020103
0c0b0203100f071f070207bd02840000000c028200090244b40e17171a0a
b8028140285f0bdf0b027f0bff0b020f0b01ef0bff0b029f0b018f0b017f
0b010f0b6f0b020f0b1f0b4f0b030bba01b2000001b240163f015f01df01
030f017f01020b011f018f01ff010401bd01b20003000502440003028140
2f8f04bf04ff04033004400450046f047f049f040604190d0b1703170d0d
040c0c0d02080205020b0801080408387a182b003f3f3f3f3f1112392f12
392f2b2b4e10f45d714dede410f65d7172fef65d5d5d5d5d5d717172fd4e
456544e64df4ed10ed5d2b103c103c01111239872e2b7d10c4872e182b7d
10c487042e182b057d10c4313001762f192f014bb00b5158b30e090d0410
3c103c59015d5d5d5d5d5d5d5d5d5d005d01727159212103032101211301
21012101039ffee235e9fef0013201ae2d01f401b3fecdfeed012104c9fb
3705bafbfd0403fa4604c000>Arial-BoldItalicMT AddT42Char 
1 14888 54 <0001007effe7056905d3002a0171407d42074a1049114d1b690d68106d13
6f1d632990019f089f169f17901c911eaa1bb91bca0cc011c81bc2281500
2c01460c49214b23034609400b4e1e4f1f4f20802c06061f190a171e151f
36224d0b4f0d461e401f43214022a41ec813c525da1eda20100828002410
240224f51628101501151a2c1c286f0f019f0f010fb8022c400f01280000
100020000300192bce32182b4e10f45d4dedf45d71ed4e10f65d4dedf45d
ed00b10602435458b9000cffe040091a1d3421201a1d340cb8ffe0401a13
16342120131634451f4521550c5a2104211f27190b0c271216ba01590019
02cbb2120301ba0159000502cbb12709003ffde43ffdf411123939111239
395d2b2b2b2b1bb7000501156f160116b80159400faf19bf19cf19031f19
2f193f190319b8ffc0b2133919b802cbb51203cf010101b8015940130540
1339a005b005c005031005200530050305b802cbb127093ffd715d2be45d
3ffd2b715df45d39111239593130005d0171007101725d13251617163332
363534272624262635342433200417052626232206151417161716171615
14002122242682011f062942b294843626feab9d5a010cfe0102011b0efe
df0b827f7d6b3131a8fd4567fecdfeeebdfeeb7201db0f89304e6a4b412d
2194639e6ab9f4f2c90d697058433f292a496d44649dc2feed7fe200>Arial-BoldItalicMT AddT42Char 
2 8758 82 <0002007cffe704cb043f000c001a00ae40344919d01cfb19f91a04cb19ca
1a02290227082812271947124919501c660478198819f01c0b104032193f
104028143f1027030717b8ffc0b332193f17b8ffc0403028143f1727090b
0d2406402a30340640473506404535af06cf06025f068f06af06ff060400
06100620065006f0060506b8014b4016201c011c142410000100002000f0
000300e51b294d182b10f65d5ded1071f65d71722b2b2bed003fed2b2b3f
ed2b2b3130015d0172711310002132001510002122262601342623220606
151416333237367c014d010feb0108feb6feeb96e8720332775e5d90507c
5e76507201b90127015ffefddbfefefe8878dc014b667b73db5c7286658f
>Arial-BoldItalicMT AddT42Char 
2 10102 86 <0001002dffe7046a043f002c01b2b90023ffe040091e0f3f18201e0f3f25
b8fff8b2093923b8fff8408c0b39102e202e302e402e502e050a0e082936
0b470c7723db0dd525e80d0807230525162313252425460a452307060209
1ad02e03202e3422362545224725402e5d005b0e54155016521757245426
5f2c502e772b862b9a0eaa15a02ba02cb02ecb15cb16c02bc42cf91a1b0e
0d0c0b0a09202122232425260d142a000401171f18010f181f185f186f18
0418b803244012121c2a140710010150016001a001c0010401b8031c400f
12042a2a0b18442f173f174f170317b8025cb50824d0270127b8ffc04027
0b350027102720273027402705278e2e1f441001242f00015f006f000250
00af00cf00ef000400b80222400c4f10010f10d0100220100110b801a4b3
2d4256182b10f65d7172f45d7172ed10ed10f65d2b71edf45ded003ffd43
5c58b90004ffc0b332193f04b8ffc0b32d173f04b8ffc0b328143f04b8ff
c0b223123f002b2b2b2b59e45d71b10602435458b40401140102005d593f
fd435c5840141c4032193f1c402d173f1c4028143f1c4023123f002b2b2b
2b59f45d7139111239111217393130015d7100715d0172002b2b2b2b1325
161633323736353427262724272635343736213216170526272623220615
141716171617161514062322262d0116256e5f623b29151661fefc3e615e
830102cdd21cfef7152f405a5a4f281988d24764fee7e6fb01292c58492c
1e2b1d17162056324e7e7e5b7f96802e3a1d273c27281a10283d3b537597
dea9>Arial-BoldItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007003cb40201b70607b802f54018000504
b703000a0704b7010019080605b70203b009bfde182b10f63cfd3c4e10f4
3c4dfd3c003f3cfd3c10fc3cfd3c3130211121112521112101000400fc20
03c0fc400500fb002004c000>Arial-BoldItalicMT AddT42Char 
Arial-BoldItalicMT /CharStrings get begin
/C 38 def
/D 39 def
/L 47 def
/M 48 def
/S 54 def
/o 82 def
/s 86 def
end
Arial-BoldItalicMT /Encoding get
dup 67 /C put
dup 68 /D put
dup 76 /L put
dup 77 /M put
dup 83 /S put
dup 111 /o put
dup 115 /s put
pop
end
%ADOEndSubsetFont
reset_gvm
/IPIXMX+Arial-BoldItalicMT /Arial-BoldItalicMT findfont ct_VMDictPut
/IPIXMX+Arial-BoldItalicMT*1 
[67{/.notdef}rp /C /D 7{/.notdef}rp /L /M 5{/.notdef}rp /S 
27{/.notdef}rp /o 3{/.notdef}rp /s 140{/.notdef}rp]
IPIXMX+Arial-BoldItalicMT nf
IPIXMX+Arial-BoldItalicMT*1 [0 -17.52 -17.52 0 0 0 ]msf
361.14 428.49 mo
(SLDLs)
[-11.6947 -10.7133 -12.6582 -10.7133 0 ]ysh
243.9 420.45 mo
(MoCs)
[-14.6045 -10.7151 -12.66 0 ]ysh
237.659 124.471 mo
(MoCs)
[-14.5887 -10.6993 -12.6442 0 ]ysh
360.72 117.332 mo
(SLDLs)
[-11.6965 -10.7151 -12.66 -10.7151 0 ]ysh
2.278 lw
317.46 179.91 mo
324.84 179.91 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
318.48 183.99 mo
306.12 179.91 li
318.48 175.77 li
318.48 183.99 li
ef
323.82 175.77 mo
336.18 179.85 li
323.82 183.99 li
323.82 175.77 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/IPIXMX+Arial-BoldItalicMT*1 uf
/IPIXMX+Arial-BoldItalicMT uf
/Arial-BoldItalicMT uf
/IPIXMW+Arial-BoldMT*1 uf
/IPIXMW+Arial-BoldMT uf
/Arial-BoldMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
